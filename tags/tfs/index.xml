<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TFS on David Triana</title><link>https://davidtriana.com/tags/tfs/</link><description>Recent content in TFS on David Triana</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>david@davidtriana.com (David Triana)</managingEditor><webMaster>david@davidtriana.com (David Triana)</webMaster><copyright>2022 David Triana All rights reserved</copyright><lastBuildDate>Mon, 18 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://davidtriana.com/tags/tfs/index.xml" rel="self" type="application/rss+xml"/><item><title>Updating Azure DevOps WorktItems programmatically</title><link>https://davidtriana.com/posts/2020/updating-azdevops-workitems-programmatically/</link><pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate><author>david@davidtriana.com (David Triana)</author><guid>https://davidtriana.com/posts/2020/updating-azdevops-workitems-programmatically/</guid><description>&lt;h2 id="scenario">Scenario&lt;/h2>
&lt;p>Some workitems are missing important information, the information was provided via an Excel sheet, the workitems need to be updated with this information without changing any other properties, particularly the workitem state.&lt;/p>
&lt;h2 id="restrictions">Restrictions&lt;/h2>
&lt;p>The workitems are in done state, and the process template has rules that prevent changes to the properties that need to be updated.&lt;/p>
&lt;p>The Excel integration, which might be a solution, is not working on this environment because of a permissions error.&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>Using the Azure DevOps .NET Client library, it is possible to update workitems. A relatively simple console application will do the trick, especially since the documentation already provides samples showing how to do it,&lt;/p>
&lt;p>&lt;a href="https://docs.microsoft.com/en-us/azure/devops/integrate/quickstarts/work-item-quickstart?view=azure-devops">Fetch work items with queries programmatically in Azure DevOps Services&lt;/a>, and&lt;/p>
&lt;p>&lt;a href="https://docs.microsoft.com/en-us/azure/devops/integrate/quickstarts/create-bug-quickstart?view=azure-devops">Create a bug in Azure DevOps Services using .NET client libraries&lt;/a>.&lt;/p>
&lt;p>The issue with the process template rules remains. Those rules are enforced not only in the user interface but also using the client library or the API directly, which in the end are the same, so for this to work a permissions change is needed, for the particular identity that will be used to interact with AzDevOps via the client library.&lt;/p>
&lt;p>The permission is called “Bypass rules on work item updates” and as off this writing can be found by navigating to Project Settings -&amp;gt; Permissions -&amp;gt; Users -&amp;gt; Find the user that will be used and in the permissions panel find this setting.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2020/AzDevOpsScreenShot01.png">&lt;img src="https://davidtriana.com/images/posts/2020/AzDevOpsScreenShot01.png" alt="AzDevOps permissions settings" title="AzDevOps permissions settings">&lt;/a>&lt;/p>
&lt;p>Once the user has this permission, he/she can certainly do these changes directly via the user interface, however doing repetitive tasks by hand is something to avoid.&lt;/p>
&lt;p>Or not…&lt;/p>
&lt;p>&lt;a href="https://twitter.com/kvlly/status/1255173275090640897?s=20">&lt;img src="https://davidtriana.com/images/posts/2020/Tweet01.png" alt="AzDevOps permissions settings" title="AzDevOps permissions settings">&lt;/a>&lt;/p>
&lt;p>Certainly I have done this many times, writing a huge Excel VB Macro to move things around or implementing a GitHub action just to copy a file, but I think in the end its worth it, primarily because manual tasks are error prone, but also because of the joy of programming!&lt;/p>
&lt;p>So, back to the point,&lt;/p>
&lt;p>With the bypass rules permission, there is something else needed from AzDevOps, and it is a personal access token, which provides impersonation, authentication and authorization. With this token the code will be able to interact with AzDevOps, using the identity of the user for which the token was generated.&lt;/p>
&lt;p>This personal access tokens have a lot of very nice security features which makes it a very good option for many scenarios, in particular the permissions can be scoped to specific artifacts and actions, and are set to expire in 30 days by default.&lt;/p>
&lt;p>At the time of writing this post, the option to create a new token is available in the top right, over the user settings icon,&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2020/AzDevOpsScreenShot02.png">&lt;img src="https://davidtriana.com/images/posts/2020/AzDevOpsScreenShot02.png" alt="AzDevOps personal token button" title="AzDevOps personal token button">&lt;/a>&lt;/p>
&lt;p>And then the token details screen looks like this,&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2020/AzDevOpsScreenShot03.png">&lt;img src="https://davidtriana.com/images/posts/2020/AzDevOpsScreenShot03.png" alt="AzDevOps personal token details" title="AzDevOps personal token details">&lt;/a>&lt;/p>
&lt;p>With the token in hand, we can now get to the code, which is an adaptation from the examples linked earlier.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using Microsoft.TeamFoundation.WorkItemTracking.WebApi;
using Microsoft.VisualStudio.Services.Common;
using Microsoft.VisualStudio.Services.WebApi;
using Microsoft.VisualStudio.Services.WebApi.Patch;
using Microsoft.VisualStudio.Services.WebApi.Patch.Json;
using Newtonsoft.Json;
namespace ConsoleApp
{
class Program
{
const string AzDevOpsUri = &amp;#34;https://dev.azure.com/&amp;lt;your_org&amp;gt;&amp;#34;;
const string PersonalAccessToken = &amp;#34;&amp;lt;the_token_generated_earlier&amp;gt;&amp;#34;;
const string ProjectName = &amp;#34;&amp;lt;the_name_of_your_project&amp;gt;&amp;#34;;
static void Main()
{
var connection = new VssConnection(new Uri(AzDevOpsUri), new VssBasicCredential(string.Empty, PersonalAccessToken));
var items = LoadJson();
UpdateWorkItems(connection, items).Wait();
Console.ReadKey();
}
static private async Task UpdateWorkItems(VssConnection connection, IEnumerable&amp;lt;Item&amp;gt; items)
{
WorkItemTrackingHttpClient witClient = connection.GetClient&amp;lt;WorkItemTrackingHttpClient&amp;gt;();
foreach (var item in items)
{
JsonPatchDocument documentWithTheUpdate = new JsonPatchDocument
{
new JsonPatchOperation()
{
Operation = Operation.Replace,
Path = &amp;#34;/fields/Microsoft.VSTS.Scheduling.Effort&amp;#34;,
Value = item.Total
}
};
try
{
var result = await witClient.UpdateWorkItemAsync(documentWithTheUpdate, ProjectName, item.ID, false,
true);
Console.WriteLine($&amp;#34;Workitem {result.Id} updated to revision {result.Rev}&amp;#34;);
}
catch (AggregateException ex)
{
Console.WriteLine($&amp;#34;Error updating workitem {item.ID}: {ex.InnerException?.Message}&amp;#34;);
}
}
}
public static List&amp;lt;Item&amp;gt; LoadJson()
{
using (StreamReader r = new StreamReader(&amp;#34;values.json&amp;#34;))
{
string json = r.ReadToEnd();
return JsonConvert.DeserializeObject&amp;lt;List&amp;lt;Item&amp;gt;&amp;gt;(json);
}
}
public class Item
{
public int ID;
public string Title;
public double Dev;
public double Test;
public double Total;
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>At some point I decided to convert the Excel file to JSON, that is why the code has this LoadJson method. Reading the Excel file specially saved as comma separated values (CSV) should not have been much different except for this method.&lt;/p>
&lt;p>My JSON input file looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">[
{
&amp;#34;ID&amp;#34;: &amp;#34;25071&amp;#34;,
&amp;#34;Dev Effort&amp;#34;: &amp;#34;1&amp;#34;,
&amp;#34;Test Effort&amp;#34;: &amp;#34;0.5&amp;#34;,
&amp;#34;Effort&amp;#34;: &amp;#34;1.5&amp;#34;
},
{
&amp;#34;ID&amp;#34;: &amp;#34;44260&amp;#34;,
&amp;#34;Dev Effort&amp;#34;: &amp;#34;2&amp;#34;,
&amp;#34;Test Effort&amp;#34;: &amp;#34;0.5&amp;#34;,
&amp;#34;Effort&amp;#34;: &amp;#34;2.5&amp;#34;
},
{
&amp;#34;ID&amp;#34;: &amp;#34;43303&amp;#34;,
&amp;#34;Dev Effort&amp;#34;: &amp;#34;4&amp;#34;,
&amp;#34;Test Effort&amp;#34;: &amp;#34;1&amp;#34;,
&amp;#34;Effort&amp;#34;: &amp;#34;5&amp;#34;
}, ...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And running the program with proper configuration and having the JSON file in the right place produce the sample output bellow&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2020/AzDevOpsScreenShot04.png">&lt;img src="https://davidtriana.com/images/posts/2020/AzDevOpsScreenShot04.png" alt="Program Output" title="Program Output">&lt;/a>&lt;/p>
&lt;p>And mission accomplished, now this WorkItems have the missing effort populated, without changing the “Done” state date.&lt;/p></description></item><item><title>Continuous Integration &amp; Deployment of a NuGet Package with VSTS</title><link>https://davidtriana.com/posts/2016/continuous-integration-deployment-of-a-nuget-package-with-vsts/</link><pubDate>Sat, 26 Nov 2016 03:54:00 +0000</pubDate><author>david@davidtriana.com (David Triana)</author><guid>https://davidtriana.com/posts/2016/continuous-integration-deployment-of-a-nuget-package-with-vsts/</guid><description>&lt;p>In this post I’ll show the configuration steps to setup a CI/CD in Visual Studio Team System that from a repository build, packages and publishes a NuGet Package.&lt;/p>
&lt;p>To publish a NuGet Package you will need a NuGet server. There are lots of options, and VSTS itself provides one. In my case I setup one using the free Nuget.Server (&lt;a href="http://nugetserver.net/" title="http://nugetserver.net/">http://nugetserver.net/&lt;/a>) and hosted it on a free tier Azure Web Site. Having that, I’m all set.&lt;/p>
&lt;p>First I need the project from which I will then generate the package, so first make sure to have a Visual Studio solution that builds, and that doesn’t have any weird local references since the build will be done by the hosted build service in VSTS. Nuget dependencies are fine, since the CI can take care of that.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Then my project needs to be in a repository in VSTS&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image1.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb1.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>With that, I’m ready to configure the CI/CD build&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image2.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb2.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Leave the defaults in the “Select a template”, be aware however that this screen can change at any time so check the options and selection in your case&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image3.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb3.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>In the “Create new build definition” screen pick the right repository, branch, and check the Continuous integration option if that is really what you want. If you leave it blank you will need to manually start each build, or schedule it in some other way&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image4.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb4.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>VSTS will create a default build definition like this:&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image5.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb5.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Leave only the first two steps, delete the rest.&lt;/p>
&lt;p>To delete a step, first click over it and then on the red arrow to the right next to it:&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image6.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb6.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Click on the green Add build step on top of the steps list and in the Task Catalog dialog select Package and look for the Nuget and click Add&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image7.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb7.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Without closing the dialog, click add on the Nuget Publisher&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image8.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb8.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Then click on Close to dismiss the Task Catalog dialog. Click on the NuGet Publisher step to reveal the configuration. If you are using the Nuget server provided by VSTS then choose “Internal Nuget Feed” and copy/paste the Url provided by the extension.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image9.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb9.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>In my case since I have a external server I left the Feed type as External and clicked on the Manage link to the right of the Url. This is needed only the first time. After the server is setup it will be available in the dropdown control for NuGet Server Endpoint.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image10.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb10.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>The Manage link opens a new page, the “Settings/Services” page. Click on the green New Service Endpoint and choose generic&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image11.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb11.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>In the Add new Generic Connection dialog use a friendly name for Connection Name and fill out the Url and Username and Password if needed. In my case with the Nuget.Server I have I passkey so I typed it there.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image12.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb12.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>After clicking Ok close the Settings page to go back to the Build page, Click on the refresh icon next to the Url to have the server available and select the server.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image13.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb13.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>At this point the Build definition is ready. It must look like this&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image14.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb14.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Click on save and provide a distinctive name for it&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image15.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb15.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>And that’s it!, if you selected the continuous integration the Build will run automatically every time you check in changes in the repo/branch selected at the beginning. To run the build manually click on “Queue build…” and leave the default options. The BuildConfiguration option is particularly important since without it, or misconfigured the build will fail.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image16.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb16.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Moments later a build agent will pick the job and you will be able to see the output of the build tasks in real time&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image17.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb17.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Then the build will finish. If something fails, it will be red, and the logs will help to find the issue, probably some issue with dependencies in the Visual Studio Solution&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image18.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb18.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>To then consume my package, if I haven’t already added my Nuget server I need to do it in the Options screen in Visual Studio. One quick way to get to the right place is to open the Nuget Package Manager and click on the Gear&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image19.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb19.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Then add the server. In my case it looks like this&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image20.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb20.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>And with that I can pick my just created package&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image21.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb21.png" alt="image" title="image">&lt;/a>&lt;/p></description></item><item><title>Running the Microsoft ALM Training Virtual Machine in Azure April 2015 Edition</title><link>https://davidtriana.com/posts/2015/running-the-alm-virtual-machine-in-azure-april-2015-edition/</link><pubDate>Thu, 09 Apr 2015 21:37:42 +0000</pubDate><author>david@davidtriana.com (David Triana)</author><guid>https://davidtriana.com/posts/2015/running-the-alm-virtual-machine-in-azure-april-2015-edition/</guid><description>&lt;p>Last month I found myself doing ALM training and demos for a couple of customers, of course using the great ALM Virtual Machine by Brian Keller. With laptops having less and less RAM I choose to set it up in the cloud and found a few web pages with the steps to do it, however with Azure evolving every day I felt the need to put out this blog post with the guidance for Azure in April 2015&lt;/p>
&lt;p>Additional to my RAM constrains I also have very limited internet access; some folks suggest to first download the virtual machine locally and then upload to azure. For me that will take at least 3 days watching a download / upload progress bar, so what I did was to do the download in Azure, and then transfer the bits to Azure itself, something like this:&lt;/p>
&lt;ol>
&lt;li>Create an Azure VM&lt;/li>
&lt;li>Add a big disk to that Azure VM (To have space for the download and extraction)&lt;/li>
&lt;li>Download the ALM VM RAR Files&lt;/li>
&lt;li>Extract the RAR Files&lt;/li>
&lt;li>Transfer the .VHD to a new blob storage&lt;/li>
&lt;li>Create a new VM from the VHD&lt;/li>
&lt;li>Create a point to site VPN to avoid exposing the VM directly to the internet&lt;/li>
&lt;li>Connect to the VPN&lt;/li>
&lt;li>Enjoy!&lt;/li>
&lt;/ol>
&lt;p>So let’s go through the steps:&lt;/p>
&lt;h1 id="create-an-azure-vm">Create an Azure VM&lt;/h1>
&lt;p>Go to the portal, New –&amp;gt; Compute –&amp;gt; Marketplace&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>For this any Windows Virtual Machine should work and I can have just picked the Windows Server 2012R2 image, however I pick the Marketplace to choose the lightest and easiest machine Azure offers me&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image1.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb1.png" alt="image" title="image">&lt;/a> &lt;/p>
&lt;p>Then click Create, pick options and Create. In my case I make sure to pick the right subscription, pick my closest datacenter and a very fast tier.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image2.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb2.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>When the VM is ready, add a new disk to it.&lt;/p>
&lt;h1 id="add-a-big-disk-to-the-vm">Add a big disk to the VM&lt;/h1>
&lt;p>From the portal click on the VM or browse for it and pick all settings, disks, attach new and choose the same storage account and container as the one for the VM. Adjust the size and cache and click Ok.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image3.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb3.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>RDP to the machine to attach the disk&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image4.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb4.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Open Computer Management and accept the suggestion&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image5.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb5.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Right click the newly created disk, choose New Simple Volume and follow the Wizard to format the disk&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image6.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb6.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Now we have a VM with enough space to fit the downloaded RAR files and then extract them, so lets do it&lt;/p>
&lt;h1 id="download-the-alm-vm-rar-files">Download the ALM VM RAR Files&lt;/h1>
&lt;p>In this step I really hate to use Free Download Manager and I spent (wasted) half a day setting up a powershell script to do the same. In the end, FDM does the job and do it very well despite the horrible user interface and installer, so for this step just follow Brian’s guide:&lt;/p>
&lt;p>&lt;a href="http://aka.ms/ALMVMs" title="http://aka.ms/ALMVMs">http://aka.ms/ALMVMs&lt;/a>&lt;/p>
&lt;p>Install FDM&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image7.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb7.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Copy the URLs from Brian’s page to the clipboard&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image8.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb8.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Open FDM and set the download folder to the new disk&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image9.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb9.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>choose import from clipboard&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image10.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb10.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Let it do its thing&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image11.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb11.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>When the download finishes, and in my case it took something like 5 minutes, run the .exe that extracts the VHD&lt;/p>
&lt;h1 id="extract-vhd">Extract VHD&lt;/h1>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image12.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb12.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Meanwhile, install PowerShell, it will be needed to upload the VHD,&lt;/p>
&lt;p>&lt;a href="http://azure.microsoft.com/en-us/documentation/articles/powershell-install-configure/" title="http://azure.microsoft.com/en-us/documentation/articles/powershell-install-configure/">http://azure.microsoft.com/en-us/documentation/articles/powershell-install-configure/&lt;/a>&lt;/p>
&lt;p>Launch PowerShell&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image13.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb13.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Connect to the subscription&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image14.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb14.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>If as me you have more that one subscription, make sure to select the one you intend to use&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image15.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb15.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;h1 id="transfer-the-vhd">Transfer the VHD&lt;/h1>
&lt;p>Make sure that the extraction finished and issue the command to start the upload. For the blob storage URL I used the same container as the one for this VM. The URL can be found on the portal&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image16.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb16.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>The command:&lt;/p>
&lt;p>&lt;code>Add-AzureVhd -Destination &amp;quot;&amp;lt;BlobStorageURL&amp;gt;/&amp;lt;YourImagesFolder&amp;gt;/&amp;lt;VHDName&amp;gt;.vhd&amp;quot; -LocalFilePath &amp;lt;PathToVHDFile&amp;gt;&lt;/code>&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image17.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb17.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>In the screenshot I show the blob storage account as the same of my VM. Later I have to re-do this using another storage account in the standard tier since I created this one on the premium tier and I had a lot of trouble later creating the actual VM.&lt;/p>
&lt;h1 id="convert-to-os-image">Convert to OS Image&lt;/h1>
&lt;p>After the VHD is uploaded it should be added as an operating system image. In the screenshot is done via PowerShell, it can also be done via the legacy portal&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image18.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb18.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;h1 id="create-the-virtual-machine">Create the Virtual Machine&lt;/h1>
&lt;p>Using the just created image, create a new virtual machine. The screenshots are with the old portal, I also did it with PowerShell&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image19.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb19.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image20.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb20.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image21.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb21.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>In the next step it is important to set the machine in a virtual network and remove the public endpoints, why?, because this image has well known usernames and passwords and exposing it to the internet just like that is a bad idea. The recommended way to do it is to leave it on a Virtual Network and then connect via VPN. In this case I used the virtual network from the first virtual machine. That one was created using the preview portal which by default creates an internal network.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image22.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb22.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;h1 id="create-a-point-to-site-vpn">Create a point to site VPN&lt;/h1>
&lt;p>While the VM get setup, let’s create the VPN. Look for the same network where the VM was located and use the wizard to create a Point to site dynamic VPN. When I took the screenshot Site-To-Site was selected, make sure to select POINT-TO-SITE&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image23.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb23.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>To get the VPN working you need a self signed certificate. If you have visual studio installed it’s easy with the makecert.exe utility. The procedure is available at &lt;a href="https://msdn.microsoft.com/library/azure/dn133792.aspx/" title="https://msdn.microsoft.com/library/azure/dn133792.aspx/">https://msdn.microsoft.com/library/azure/dn133792.aspx/&lt;/a> and looks like this:&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image24.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb24.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image25.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb25.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;h1 id="connect-to-the-vpn">Connect to the VPN&lt;/h1>
&lt;p>Wait for the creation of the gateway, that usually takes a long time, and then download the client, install and connect:&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image26.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb26.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;h1 id="connect-to-the-vm">Connect to the VM&lt;/h1>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image27.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb27.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image28.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb28.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>At this point the first Virtual Machine can be deleted. I will however keep the disk with the original VHD as a mean to rollback since here in Azure I don’t have the snapshotting facility provided by HyperV.&lt;/p>
&lt;p>Now let’s do some ALM…&lt;/p></description></item><item><title>Moving tfs 2010 databases from sql 2005 to sql 2008r2</title><link>https://davidtriana.com/posts/2012/moving-tfs-2010-databases-from-sql-2005-to-sql-2008r2/</link><pubDate>Mon, 04 Jun 2012 02:59:06 +0000</pubDate><author>david@davidtriana.com (David Triana)</author><guid>https://davidtriana.com/posts/2012/moving-tfs-2010-databases-from-sql-2005-to-sql-2008r2/</guid><description>&lt;p>During the weekend I assisted a customer in the move of TFS 2010 databases from SQL 2005 to SQL 2008R2. The scenario also included Sharepoint Fundation 2010 and SQL Reporting Services.&lt;/p>
&lt;p>MSDN offers a very complete guide about this procedure, &lt;a href="http://msdn.microsoft.com/en-us/library/ms252516.aspx">http://msdn.microsoft.com/en-us/library/ms252516.aspx&lt;/a> , however the guide warns about possible problems if the SQL Server version is different. The guide says:&lt;/p>
&lt;p>“The version of SQL Server that you install must exactly match the version on the original server that hosted the databases. This requirement includes the service-pack level, the collation settings, and the language edition”&lt;/p>
&lt;p>However there’s no guide or procedure to prepare the data to be upgraded or something like that. I guest this warning applies when moving from SQL 2005 to SQL 2005 in the case of disaster recovery but in the case of version upgrade there’s really no problem.&lt;/p>
&lt;p>The other issue I had with the guide is that the link for the detailed procedure with Sharepoint after restoring the databases points to the article for WSS 3.0, my customer was using Sharepoint Foundation 2010. The procedure in this case consists on creating a SQL Server alias in the application server that hosts Sharepoint. If the server is 64 bits remember to create the alias for both clients, x86 and x64.&lt;/p></description></item><item><title>Migrating from local TFS to TFSPreview</title><link>https://davidtriana.com/posts/2012/migrating-from-local-tfs-to-tfspreview/</link><pubDate>Tue, 06 Mar 2012 23:11:21 +0000</pubDate><author>david@davidtriana.com (David Triana)</author><guid>https://davidtriana.com/posts/2012/migrating-from-local-tfs-to-tfspreview/</guid><description>&lt;p>TFSPreview, the Team Foundation on the cloud offered by Microsoft is a very good alternative, specially for distributed development teams.&lt;/p>
&lt;p>It’s currently free and invite only but the invite codes are relatively easy to get. I asked for one in the page and got it in two days.&lt;/p>
&lt;p>&lt;a href="http://www.tfspreview.com">www.tfspreview.com&lt;/a>&lt;/p>
&lt;p>Account activated, TFS available but what about my existing projects in my local TFS?,&lt;/p>
&lt;p>The official word is that there’s no supported way to migrate, but, there’re some reports of success using the TFS Integration tools, well, I’m about to confirm or deny that reports!&lt;/p>
&lt;p>1. Create your own TFSPreview account&lt;/p>
&lt;p>2. Install TFS Integration Tools&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2012/05/image33.png">&lt;img src="https://davidtriana.com/images/posts/2012/05/image33.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>3. Ensure that you are running Visual Studio 2010 SP1 &lt;a href="http://www.microsoft.com/download/en/details.aspx?id=23691">http://www.microsoft.com/download/en/details.aspx?id=23691&lt;/a>and have KB2581206 &lt;a href="http://support.microsoft.com/kb/2581206">http://support.microsoft.com/kb/2581206&lt;/a> installed.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2012/05/image34.png">&lt;img src="https://davidtriana.com/images/posts/2012/05/image34.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>In my case I was missing the KB, not sure if it’s even distributed by Windows Update.&lt;/p>
&lt;p>4. Make sure that your Visual Studio is able to connect to TFSPreview. It’s as easy as connecting to any other TFS, just point the team explorer to the URL, a new authentication window pops up and voila.&lt;/p>
&lt;p>5. Create the project(s) in TFSPreview via the website.&lt;/p>
&lt;p>6. Create a migration configuration with the TFS Integration Tools&lt;/p>
&lt;p>[&lt;img src="https://davidtriana.com/images/posts/2012/05/image35.png" alt="image" title="image">](/images/posts/2012/05/image35.png&lt;/p>
&lt;p>7. Select the template that you really need.&lt;/p>
&lt;p>[&lt;img src="https://davidtriana.com/images/posts/2012/05/image36.png" alt="image" title="image">](/images/posts/2012/05/image36.png&lt;/p>
&lt;p>8. Click configure for each side.&lt;/p>
&lt;p>[&lt;img src="https://davidtriana.com/images/posts/2012/05/image37.png" alt="image" title="image">](/images/posts/2012/05/image37.png&lt;/p>
&lt;p>9. The dialog to pick the project is the same from Team Explorer.&lt;/p>
&lt;p>[&lt;img src="https://davidtriana.com/images/posts/2012/05/image38.png" alt="image" title="image">](/images/posts/2012/05/image38.png&lt;/p>
&lt;p>10. All set, click start&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2012/05/image39.png">&lt;img src="https://davidtriana.com/images/posts/2012/05/image39.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>11. Wait … , wait…, wait&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2012/05/image40.png">&lt;img src="https://davidtriana.com/images/posts/2012/05/image40.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>12. It worked!!!!&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2012/05/image41.png">&lt;img src="https://davidtriana.com/images/posts/2012/05/image41.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>13. Of course I do not trust the green icons in the tool. I checked in the TFSPreview web site and everything looks in place. Then I connected via Visual Studio, connected the source control, build the project and it works perfectly.&lt;/p></description></item></channel></rss>