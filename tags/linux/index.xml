<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on David Triana</title><link>https://davidtriana.com/tags/linux/</link><description>Recent content in Linux on David Triana</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>david@davidtriana.com (David Triana)</managingEditor><webMaster>david@davidtriana.com (David Triana)</webMaster><copyright>2022 David Triana All rights reserved</copyright><lastBuildDate>Fri, 16 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://davidtriana.com/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Visual Studio Code Remote</title><link>https://davidtriana.com/posts/2020/vscode-remote/</link><pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate><author>david@davidtriana.com (David Triana)</author><guid>https://davidtriana.com/posts/2020/vscode-remote/</guid><description>&lt;p>Visual Studio Code Remote enables scenarios where the editing happens on the client machine, but all the processing, build and dependencies happen somewhere else.&lt;/p>
&lt;p>This is great for situations where the software being build requieres some specific setup that conflicts with your current machine or operating system, or to provide isolation between different projects or development environments, or to have access to more performant hardware or better internet connection, for the build, pulling dependencies, pushing containers, pulling docker images and many other scenarios where your local machine is not ideal.&lt;/p>
&lt;p>A similar solution already exists, called &lt;a href="https://azure.microsoft.com/en-us/services/visual-studio-online/">Visual Studio Codespaces&lt;/a>, which works pretty well but its being transitioned to a new home, in &lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-codespaces-is-consolidating-into-github-codespaces/">GitHub&lt;/a>, and at the time of this blog post it is still in private preview. A great discussion about it is available &lt;a href="https://www.dotnetrocks.com/?show=1708">here&lt;/a>.&lt;/p>
&lt;p>The specific scenarios for which this technology is a great time saver for me are:&lt;/p>
&lt;h4 id="build-environments-isolation">
Build environments isolation
&lt;a class="heading-link" href="#build-environments-isolation">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h4>
&lt;p>Different projects have different needs, and often those needs collide, different version, different system configurations. With this technology I can have a specific remote for linux-phyton, linux-go, linux-dotnetcore, or even more specific, by version or project, having a trusted build environment for that specific need&lt;/p>
&lt;h4 id="high-bandwidth-requirements">
High bandwidth requirements
&lt;a class="heading-link" href="#high-bandwidth-requirements">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h4>
&lt;p>Living outside the city has many adventages, but broadband is not one of them, so if my productivity depends on downloading several docker images, pushing containers, or having very good connectivity in general, then I&amp;rsquo;m not productive, however with this technology all of that happens on the remote, where the bandwith is not a problem&lt;/p>
&lt;h2 id="setting-it-up">
Setting it up
&lt;a class="heading-link" href="#setting-it-up">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>While the steps to set this up are already documented &lt;a href="https://code.visualstudio.com/docs/remote/ssh-tutorial">here&lt;/a>, this blog post goes over some of the details to make it work. For this, I created a new environment, on the client side I created a new Windows 10 Pro VM, and for the remote, a CentOS VM, both in Azure. Of course the idea of the client is to use your own computer, I created a new VM to see it work from scratch and being able to document all the steps.&lt;/p>
&lt;p>I created the Windows VM from the portal in a new resource group called remotevs, for the Linux VM I used Azure CLI from the cloud shell in the portal:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">az vm create --resource-group remotevs --name remotevsserver --image OpenLogic:CentOS:7.7:7.7.2020062400 --admin-username azureuser --generate-ssh-keys
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here I used the CentOS image just because I&amp;rsquo;m studying for the Linux Foundation certification, any other image should work fine as happens with the one I use to build this blog which is based in Ubuntu.&lt;/p>
&lt;p>Once the VMs were running I opened a remote desktop session on the Windows machine, and installed Visual Studio Code. Right after that I clicked on the link to get the SSH Extension, and got it installed on VSCode&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2020/vscode-remote-extension.png">&lt;img src="https://davidtriana.com/images/posts/2020/vscode-remote-extension.png" alt="VSCode Remote SSH Extension" title="VSCode Remote SSH Extension">&lt;/a>&lt;/p>
&lt;p>The documentation indicates that an SSH Client is needed on the client, and links to &lt;a href="https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse">OpenSSH for Windows&lt;/a>, which can be added via the user interface or via PowerShell, which I did&lt;/p>
&lt;p>&lt;img src="https://davidtriana.com/images/posts/2020/admin-powershellpng.png" alt="&amp;ldquo;Opening powershell as admin&amp;rdquo;" title="Opening powershell as admin">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And now what is missing is the SSH Key. In the documentation, it is suggested to first create a key pair, and then use that public key during the virtual machine creation. That certainly works, the way I did it however, with the generate-ssh-keys parameter, means that the public and private keys are there in the cloud shell. I need to copy those keys to the client for the authentication to work.&lt;/p>
&lt;p>To copy the files, I opened a cloud shell again, this time on the client machine, found the files, and then copy using the download command&lt;/p>
&lt;p>&lt;img src="https://davidtriana.com/images/posts/2020/copyssh.png" alt="Copying files from cloud shell" title="Copying files from cloud shell">&lt;/p>
&lt;p>And now move them in the client file system to the expected location&lt;/p>
&lt;p>&lt;img src="https://davidtriana.com/images/posts/2020/copysshpowershell.png" alt="Moving files to ssh folder" title="Moving files to ssh folder">&lt;/p>
&lt;p>The name id_rsa is a default name, and if this is your client machine you might already have one. Its fine to rename it, but the filename will need to be passed explicitly to the ssh command, and also be set explicitly in the VSCode configuration.&lt;/p>
&lt;p>If the add-ssh command fails with&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">Error connecting to agent: No such file or directory
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Its because the ssh-agent service is not running. To start it in PowerShell&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">Get-Service -Name ssh-agent | Set-Service -StartupType Manual
Start-Service ssh-agent
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As described &lt;a href="https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_keymanagement">here&lt;/a>&lt;/p>
&lt;p>With the private key in place is time for a test&lt;/p>
&lt;p>&lt;img src="https://davidtriana.com/images/posts/2020/sshtest.png" alt="SSH Connection Test" title="SSH Connection Test">&lt;/p>
&lt;p>And now that I know my client is able to SSH to the remote, its time for VSCode to do the same&lt;/p>
&lt;p>&lt;img src="https://davidtriana.com/images/posts/2020/codeconnect.png" alt="Connection dialog in VSCode" title="Connection dialog in VSCode">&lt;/p>
&lt;p>&lt;img src="https://davidtriana.com/images/posts/2020/connecttestvscode.png" alt="VSCode and terminal connected" title="VSCode and terminal connected">&lt;/p>
&lt;p>In case the private key file has a different name, as happens to me with the one for the blog, the connection will fail and the extension will allow to edit the configuration, which is a text file. On that text file, you can provide the path and name of the private key file, in my case for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">Host hugoblog
HostName hugoblog
User azureuser
ForwardAgent yes
IdentityFile ~/.ssh/hugoblog
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="next-steps">
Next steps
&lt;a class="heading-link" href="#next-steps">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>Depending on the purpose of the remote you will need to apt-get update, configure git, install dotnet core, install python, install Azure CLI &amp;hellip;&lt;/p>
&lt;p>And something that works without explicit configuration is port forwarding, in the case of my blog I can browse it locally, as if it was running locally but in realilty is being port-forwarded from the remote. This works with dotnet core as well.&lt;/p>
&lt;p>Have fun!&lt;/p></description></item><item><title>Getting the Shell back on WSL</title><link>https://davidtriana.com/posts/2020/getting-the-shell-back-on-wsl/</link><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate><author>david@davidtriana.com (David Triana)</author><guid>https://davidtriana.com/posts/2020/getting-the-shell-back-on-wsl/</guid><description>&lt;p>I have been using Linux more and more, via WSL, and learning a lot along the way.&lt;/p>
&lt;p>Part of the jorney is breaking and fixing things, which is exactly what happened to me today.&lt;/p>
&lt;p>I was trying to get the very nice command prompt, like the one from &lt;a href="https://www.hanselman.com/blog/HowToMakeAPrettyPromptInWindowsTerminalWithPowerlineNerdFontsCascadiaCodeWSLAndOhmyposh.aspx" title="Scott Hanselman's post about pretty prompts">Scott Hanselman&lt;/a>, and at some point following different steps from the ones shared by Scott I installed zsh as my shell.&lt;/p>
&lt;p>After trying the zsh approach and not being able to make it work, I decided to revert, and stick to what Scott did, so first thing was removing zsh,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">sudo apt-get remove zsh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And then when trying to get the prompt again all I got back was&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2020/74581889-deaed800-4fef-11ea-9da4-af11872473e2.png">&lt;img src="https://davidtriana.com/images/posts/2020/74581889-deaed800-4fef-11ea-9da4-af11872473e2.png" alt="process exited with code 1" title="process exited with code 1">&lt;/a>&lt;/p>
&lt;p>Very bad&lt;/p>
&lt;p>A similar &lt;a href="https://github.com/microsoft/WSL/issues/4899#issuecomment-658973402">GitHub issue&lt;/a> provided some tips, none of which fixed my problem, but &lt;a href="https://github.com/microsoft/WSL/issues/4899#issuecomment-631976826">this particular comment&lt;/a> set me in the right path, by running&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">wsl --user root
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With it I was able to get the bash prompt back, and from there try to fix whatever was broken. Since something was failing while starting the shell, after removing zsh, I looked into the .bashrc and .zshrc files, removed them, but no change.&lt;/p>
&lt;p>Then a response to my comment on github cleared everything up, &amp;ldquo;either apt install zsh or modify your users shell with chsh&amp;rdquo;&lt;/p>
&lt;p>So I was able to interact as root, since root was still using bash, but my user was still configured to use zsh, and since I removed it that&amp;rsquo;s why it wasn&amp;rsquo;t working, and to change the shell? That&amp;rsquo;s where the &lt;a href="https://www.computerhope.com/unix/chsh.htm">chsh command&lt;/a> comes to the rescue.&lt;/p>
&lt;p>So running&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">chsh -s /bin/bash myLinuxUsername
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Fixed the bash prompt&lt;/p>
&lt;p>Now, back to customizing the prompt but without zsh, I revisited Scott&amp;rsquo;s post, and then I needed to add some lines to the .bashrc file, but I deleted that one while troubleshooting earlier.&lt;/p>
&lt;p>Luckily I found &lt;a href="https://www.reddit.com/r/bashonubuntuonwindows/comments/5d9hhe/can_someone_please_paste_the_content_the_default/da3bv2i/">this reddit comment&lt;/a>&lt;/p>
&lt;p>And sure enough, the default .bashrc was available at /etc/skel so I just went there and did a&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">cp .bashrc ~/
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And back on track to get my prompt as fancy as Scott&amp;rsquo;s, and of course back at being productive with WSL.&lt;/p></description></item></channel></rss>