<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Azure on David Triana</title><link>https://davidtriana.com/tags/azure/</link><description>Recent content in Azure on David Triana</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>david@davidtriana.com (David Triana)</managingEditor><webMaster>david@davidtriana.com (David Triana)</webMaster><copyright>2022 David Triana All rights reserved</copyright><lastBuildDate>Tue, 15 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://davidtriana.com/tags/azure/index.xml" rel="self" type="application/rss+xml"/><item><title>Listing Azure Function Apps Framework Version</title><link>https://davidtriana.com/posts/2022/listing-azure-functionapps-framework/</link><pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate><author>david@davidtriana.com (David Triana)</author><guid>https://davidtriana.com/posts/2022/listing-azure-functionapps-framework/</guid><description>&lt;h1 id="scenario">
Scenario
&lt;a class="heading-link" href="#scenario">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>Azure Function Apps running with .NET 3.1 will go out of support on Dec 3 2022, something that the Azure Portal reminds users every time they visit their outdated functions. If like me, you have several functions, whouldn&amp;rsquo;t it be nice to be able to get a list of all the functions that should be updated?&lt;/p>
&lt;h1 id="solution">
Solution
&lt;a class="heading-link" href="#solution">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>A simple &lt;code>az functionapps list&lt;/code> should do the trick, however the properties that provide this information are in one of the objects, siteConfig, which is not populated by the &lt;code>list&lt;/code> command, and after searching for a while I found &lt;a href="https://github.com/Azure/azure-cli/issues/21548#issuecomment-1061634921">this solution for WebApps&lt;/a>, the command for Function Apps is&lt;/p>
&lt;p>&lt;code>az functionapp list --query '[].id' -o tsv | xargs | xargs -I{} bash -c &amp;quot;az functionapp config show --ids {} --query '[].[name, resourceGroup,linuxFxVersion, netFrameworkVersion]' --out table&amp;quot;&lt;/code>&lt;/p>
&lt;p>This command will list all the functions in the current subscription, provided proper permissions.&lt;/p>
&lt;p>The output looks like this:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Column1&lt;/th>
&lt;th>Column2&lt;/th>
&lt;th>Column3&lt;/th>
&lt;th>Column4&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>tseries-urban-cars&lt;/td>
&lt;td>cars-classifier&lt;/td>
&lt;td>DOTNET|6.0&lt;/td>
&lt;td>v6.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tseries-urban-buildings&lt;/td>
&lt;td>buildings-location&lt;/td>
&lt;td>v4.0&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tseries-urban-weapons&lt;/td>
&lt;td>weapons-catalog&lt;/td>
&lt;td>DOTNET|6.0&lt;/td>
&lt;td>v6.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>targets&lt;/td>
&lt;td>targets-catalog&lt;/td>
&lt;td>DOTNET|3.1&lt;/td>
&lt;td>v4.0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Rows 1 and 3 were updated already, row 2 is not .NET, and the last needs to be updated&lt;/p></description></item><item><title>Renewing Microsoft Certifications</title><link>https://davidtriana.com/posts/2021/renewing-microsoft-certifications/</link><pubDate>Mon, 18 Oct 2021 00:00:00 +0000</pubDate><author>david@davidtriana.com (David Triana)</author><guid>https://davidtriana.com/posts/2021/renewing-microsoft-certifications/</guid><description>&lt;h1 id="action-required---your-microsoft-certification-will-expire-in-180-days">
Action required - Your Microsoft Certification will expire in 180 days!
&lt;a class="heading-link" href="#action-required---your-microsoft-certification-will-expire-in-180-days">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>That email subject, from May 21, asked for action, to get one of my certifications renewed, or &amp;ldquo;If your certification expires, you must earn the certification again by passing the required certification exam(s)&amp;rdquo;&lt;/p>
&lt;p>This renewal process is &lt;a href="https://docs.microsoft.com/en-us/learn/certifications/renew-your-microsoft-certification">new in many ways&lt;/a>, main differences are&lt;/p>
&lt;ul>
&lt;li>The topics covered are not necessarily the same as for the original exam/certification&lt;/li>
&lt;li>The exam itself is simpler than the proctored exam, no proctor, no dedicated exam app&lt;/li>
&lt;/ul>
&lt;p>I renewed 3 certifications with this process,&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/learn/certifications/azure-developer/renew/">Azure Developer Associate&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/learn/certifications/devops-engineer/renew/">DevOps Engineer Expert&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/learn/certifications/azure-solutions-architect/renew/">Azure Solutions Architect Expert&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>I passed all on the first try, however the renewal exams can be repeated as many times as needed&lt;/p>
&lt;p>&lt;img src="https://davidtriana.com/images/posts/2021/exams.png" alt="&amp;ldquo;Exams&amp;rdquo;" title="Exams">&lt;/p>
&lt;p>To prepare, I went through all the linked materials on each of the certification pages, all of which go to the Microsoft Learn site, and include theory, labs and exam. I highly recommend this approach because&lt;/p>
&lt;ul>
&lt;li>The liked materials are directly related to the questions in the renewal exam&lt;/li>
&lt;li>The Microsoft Learn materials and labs are very well made, up to date and relevant&lt;/li>
&lt;/ul>
&lt;p>During the renewal exam, without a proctor or dedicated app, nothing prevents you from navigating back to the learning materials or searching for the answers online. While this approach might work to renew the certification, I think that misses the point. I think going through the materials preparing for the exam, and then consciously answering the exam questions fulfills the &amp;ldquo;brush up on your skills&amp;rdquo; objective in the invitation email.&lt;/p>
&lt;p>About the individual exams, what I found is that all the topics are covered in the learning materials and a lot of the topics from the original exams are not part of the renewal. The questions are less &amp;ldquo;tricky&amp;rdquo; than in the proctored exams and all the questions are multiple selections, no labs, no &amp;ldquo;order the commands&amp;rdquo; or any other of the question types available in the proctored exams.&lt;/p>
&lt;h1 id="see-more">
See More
&lt;a class="heading-link" href="#see-more">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>Something that happened to me while preparing for the DevOps exam, opening the links to the learning materials, is that I missed some of the materials. While doing the exam I got some questions for which I wasn&amp;rsquo;t prepared, then after the exam I went back to the page and noticed the &amp;ldquo;See More&amp;rdquo; link at the bottom of the list of training materials, same link is present in the Architect Expert exam, and I learned my lesson.&lt;/p>
&lt;h1 id="celebrate">
Celebrate
&lt;a class="heading-link" href="#celebrate">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>&lt;img src="https://davidtriana.com/images/posts/2021/celebrate.png" alt="&amp;ldquo;Celebrate&amp;rdquo;" title="Celebrate">&lt;/p></description></item><item><title>Deploying Log4Brains ADRs in Azure Static Sites</title><link>https://davidtriana.com/posts/2021/deploying-log4brains-adr-in-azure-static-sites/</link><pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate><author>david@davidtriana.com (David Triana)</author><guid>https://davidtriana.com/posts/2021/deploying-log4brains-adr-in-azure-static-sites/</guid><description>&lt;h1 id="scenario">
Scenario
&lt;a class="heading-link" href="#scenario">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>Suppose your project has decided to use &lt;a href="https://github.com/thomvaill/log4brains">Log4Brains&lt;/a> to record architectural decisions and now you need to make the resulting website available, in Microsoft Azure, via a CD Pipeline. To learn about &lt;a href="https://en.wikipedia.org/wiki/Architectural_decision#Decision_documentation">ADRs&lt;/a> or architectural decision records I highly recommend &lt;a href="https://ardalis.com/getting-started-with-architecture-decision-records/">Steve Smith&amp;rsquo;s post about it&lt;/a>.&lt;/p>
&lt;h2 id="install-log4brains-and-create-your-adrs">
Install Log4Brains and create your ADRs
&lt;a class="heading-link" href="#install-log4brains-and-create-your-adrs">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Install &lt;a href="https://github.com/thomvaill/log4brains#what-are-the-prerequisites">Log4Brains&amp;rsquo;s prerequisites&lt;/a> to which I will add &lt;a href="https://code.visualstudio.com/Download">VsCode&lt;/a>, with the &lt;a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint">.md extension&lt;/a>&lt;/li>
&lt;li>Install &lt;a href="https://github.com/thomvaill/log4brains#-getting-started">Log4Brains&lt;/a> and follow the getting started guide. You should be able to preview the site, and create your own ADRs&lt;/li>
&lt;/ul>
&lt;h2 id="commit-and-push-to-azdevops">
Commit and push to AzDevOps
&lt;a class="heading-link" href="#commit-and-push-to-azdevops">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>It can be &lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/create-new-repo?view=azure-devops">a new repository&lt;/a> or the existing repository with the application. Before push ensure the output is being ignored via you .gitignore file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback"># Log4Brains Output
.Log4Brains/
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="add-pipeline-yaml-file">
Add pipeline YAML File
&lt;a class="heading-link" href="#add-pipeline-yaml-file">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>The location doesn&amp;rsquo;t really matter. It can be at / , or you can have a Pipelines or similar folder, the location and name of the file doesn&amp;rsquo;t really matter, what matters is the content:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">trigger: none
pr: none
stages:
- stage: build
displayName: &amp;#39;Build&amp;#39;
jobs:
- job: build
displayName: &amp;#39;Build&amp;#39;
pool:
vmImage: &amp;#39;ubuntu-latest&amp;#39;
steps:
- task: NodeTool@0
inputs:
versionSpec: &amp;#39;14.x&amp;#39;
displayName: &amp;#39;Install Node.js&amp;#39;
- script: |
npm install -g log4brains
log4brains build
displayName: &amp;#39;Install and Build Log4brains&amp;#39;
- task: CopyFiles@2
displayName: &amp;#39;Copy config to $(System.DefaultWorkingDirectory)/.log4brains/out&amp;#39;
inputs:
Contents: staticwebapp.config.json
TargetFolder: &amp;#39;$(System.DefaultWorkingDirectory)/.log4brains/out&amp;#39;
- task: PublishPipelineArtifact@1
inputs:
targetPath: &amp;#39;$(System.DefaultWorkingDirectory)/.log4brains/out&amp;#39;
artifactName: staticSite
- stage: publish
displayName: &amp;#39;Publish&amp;#39;
dependsOn: build
jobs:
- deployment: deployProd
displayName: &amp;#39;Deploy prod&amp;#39;
environment: prod
strategy:
runOnce:
deploy:
steps:
- task: DownloadPipelineArtifact@2
displayName: Download static site artifact
inputs:
artifact: staticSite
path: $(Build.SourcesDirectory)/staticSite
- task: AzureStaticWebApp@0
displayName: Upload to Azure Static WebApp
inputs:
app_location: /staticSite
output_location: &amp;#34;&amp;#34;
env:
azure_static_web_apps_api_token: $(deployment_token)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a multistage pipeline, where first we build the application, or in this case, run the Log4Brains static site generator to get the html/css output and make it available via Azure DevOps Artifacts, then the second stage pulls the artifact and publishes to Azure Static WebSites.&lt;/p>
&lt;p>On the first stage we install node, install Log4Brains, run the build command to generate the output, then publish the output as an artifact. There is a CopyFiles task before the publish task, this task is to add a special config .json file to the output. This &lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/configuration#example-configuration-file">special file&lt;/a> is not needed if you want your ADRs to be publicly available, however if you want to take advantage of the &lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization">Azure Static Website authorization and authentication&lt;/a> capability, you want to copy this file, which gets created in the next step.&lt;/p>
&lt;p>The second stage pulls the artifact and calls the AzureStaticWebApp task to get the site published. The publish token is a pipeline variable that we will set later on the create pipeline step.&lt;/p>
&lt;p>Git commit, git push, to make the file available in the repository.&lt;/p>
&lt;h2 id="adding-the-static-web-page-configuration-file">
Adding the Static Web Page configuration file
&lt;a class="heading-link" href="#adding-the-static-web-page-configuration-file">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>Optional, only if don&amp;rsquo;t want your ADRs to be public. Azure Static Websites provide &lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization">authorization and authentication capabilities&lt;/a> which are configured via the staticwebapp.config.json file, and then adding authorized users via the Azure Portal.&lt;/p>
&lt;p>I created the staticwebapp.config.json file in /, and configured it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">{
&amp;#34;routes&amp;#34;: [
{
&amp;#34;route&amp;#34;: &amp;#34;/*&amp;#34;,
&amp;#34;allowedRoles&amp;#34;: [&amp;#34;reader&amp;#34;]
}],
&amp;#34;responseOverrides&amp;#34;: {
&amp;#34;401&amp;#34;: {
&amp;#34;redirect&amp;#34;: &amp;#34;/.auth/login/aad&amp;#34;,
&amp;#34;statusCode&amp;#34;: 302
},
&amp;#34;404&amp;#34;: {
&amp;#34;rewrite&amp;#34;: &amp;#34;/404.html&amp;#34;
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>What it says is that every route is only allowed to the &amp;ldquo;reader&amp;rdquo; role, and if a request comes from a not previously authenticated user, the request will be redirected to the Azure Active Directory authentication provider.&lt;/p>
&lt;p>Git commit, git push, to make the file available in the repository.&lt;/p>
&lt;h2 id="create-an-azure-static-website">
Create an Azure Static Website
&lt;a class="heading-link" href="#create-an-azure-static-website">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>No surprises here, &lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/publish-devops#create-a-static-web-app">the steps on the portal&lt;/a> are very straight forward, and of course the CLI or a proper infrastructure as code pipeline will work as well.&lt;/p>
&lt;h2 id="create-an-azure-devops-pipeline">
Create an Azure DevOps Pipeline
&lt;a class="heading-link" href="#create-an-azure-devops-pipeline">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>Again, no surprises, &lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/publish-devops#create-the-pipeline-task-in-azure-devops">the steps on the guide are very clear&lt;/a>, except for steps 3 and 4, instead of the starter pipeline, select Existing Pipeline and point to the YAML File created earlier, then proceed to the next steps that set the variable with the token and run the pipeline.&lt;/p>
&lt;p>&lt;img src="https://davidtriana.com/images/posts/2021/log4brains_pipeline.png" alt="&amp;ldquo;Pipeline Success&amp;rdquo;" title="Pipeline Success">&lt;/p>
&lt;p>The artifacts link available in the pipeline output screen will allow you to verify the contents of the artifact, to ensure the index.html and the staticwebapp.config.json files are present, very useful for troubleshooting.&lt;/p>
&lt;p>&lt;img src="https://davidtriana.com/images/posts/2021/log4brains_artifact.png" alt="&amp;ldquo;Artifact details&amp;rdquo;" title="Artifact details">&lt;/p>
&lt;h2 id="invite-users">
Invite users
&lt;a class="heading-link" href="#invite-users">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>Navigate to the Azure Portal, to the Static Web Resource, click on Role management to invite users&lt;/p>
&lt;p>&lt;img src="https://davidtriana.com/images/posts/2021/log4brains_addrolesteps.png" alt="&amp;ldquo;Role management&amp;rdquo;" title="Role management">&lt;/p>
&lt;p>In the invite users dialog, use &amp;lsquo;reader&amp;rsquo; as role. If you use any other role be sure to update the staticwebapp.config.json file accordingly.&lt;/p>
&lt;p>&lt;img src="https://davidtriana.com/images/posts/2021/log4brains_addroledialog.png" alt="&amp;ldquo;Role management&amp;rdquo;" title="Role management">&lt;/p>
&lt;h2 id="enjoy">
Enjoy!
&lt;a class="heading-link" href="#enjoy">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>And with that, the site is available, with user authentication in place. The pipeline trigger can be updated so that every time a new ADR is checked in the pipeline runs automatically.&lt;/p></description></item><item><title>Continuous Integration &amp; Deployment of a NuGet Package with VSTS</title><link>https://davidtriana.com/posts/2016/continuous-integration-deployment-of-a-nuget-package-with-vsts/</link><pubDate>Sat, 26 Nov 2016 03:54:00 +0000</pubDate><author>david@davidtriana.com (David Triana)</author><guid>https://davidtriana.com/posts/2016/continuous-integration-deployment-of-a-nuget-package-with-vsts/</guid><description>&lt;p>In this post I’ll show the configuration steps to setup a CI/CD in Visual Studio Team System that from a repository build, packages and publishes a NuGet Package.&lt;/p>
&lt;p>To publish a NuGet Package you will need a NuGet server. There are lots of options, and VSTS itself provides one. In my case I setup one using the free Nuget.Server (&lt;a href="http://nugetserver.net/" title="http://nugetserver.net/">http://nugetserver.net/&lt;/a>) and hosted it on a free tier Azure Web Site. Having that, I’m all set.&lt;/p>
&lt;p>First I need the project from which I will then generate the package, so first make sure to have a Visual Studio solution that builds, and that doesn’t have any weird local references since the build will be done by the hosted build service in VSTS. Nuget dependencies are fine, since the CI can take care of that.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Then my project needs to be in a repository in VSTS&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image1.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb1.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>With that, I’m ready to configure the CI/CD build&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image2.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb2.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Leave the defaults in the “Select a template”, be aware however that this screen can change at any time so check the options and selection in your case&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image3.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb3.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>In the “Create new build definition” screen pick the right repository, branch, and check the Continuous integration option if that is really what you want. If you leave it blank you will need to manually start each build, or schedule it in some other way&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image4.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb4.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>VSTS will create a default build definition like this:&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image5.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb5.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Leave only the first two steps, delete the rest.&lt;/p>
&lt;p>To delete a step, first click over it and then on the red arrow to the right next to it:&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image6.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb6.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Click on the green Add build step on top of the steps list and in the Task Catalog dialog select Package and look for the Nuget and click Add&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image7.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb7.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Without closing the dialog, click add on the Nuget Publisher&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image8.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb8.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Then click on Close to dismiss the Task Catalog dialog. Click on the NuGet Publisher step to reveal the configuration. If you are using the Nuget server provided by VSTS then choose “Internal Nuget Feed” and copy/paste the Url provided by the extension.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image9.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb9.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>In my case since I have a external server I left the Feed type as External and clicked on the Manage link to the right of the Url. This is needed only the first time. After the server is setup it will be available in the dropdown control for NuGet Server Endpoint.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image10.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb10.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>The Manage link opens a new page, the “Settings/Services” page. Click on the green New Service Endpoint and choose generic&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image11.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb11.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>In the Add new Generic Connection dialog use a friendly name for Connection Name and fill out the Url and Username and Password if needed. In my case with the Nuget.Server I have I passkey so I typed it there.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image12.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb12.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>After clicking Ok close the Settings page to go back to the Build page, Click on the refresh icon next to the Url to have the server available and select the server.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image13.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb13.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>At this point the Build definition is ready. It must look like this&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image14.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb14.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Click on save and provide a distinctive name for it&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image15.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb15.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>And that’s it!, if you selected the continuous integration the Build will run automatically every time you check in changes in the repo/branch selected at the beginning. To run the build manually click on “Queue build…” and leave the default options. The BuildConfiguration option is particularly important since without it, or misconfigured the build will fail.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image16.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb16.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Moments later a build agent will pick the job and you will be able to see the output of the build tasks in real time&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image17.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb17.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Then the build will finish. If something fails, it will be red, and the logs will help to find the issue, probably some issue with dependencies in the Visual Studio Solution&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image18.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb18.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>To then consume my package, if I haven’t already added my Nuget server I need to do it in the Options screen in Visual Studio. One quick way to get to the right place is to open the Nuget Package Manager and click on the Gear&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image19.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb19.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Then add the server. In my case it looks like this&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image20.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb20.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>And with that I can pick my just created package&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2016/11/image21.png">&lt;img src="https://davidtriana.com/images/posts/2016/11/image_thumb21.png" alt="image" title="image">&lt;/a>&lt;/p></description></item><item><title>Running the Microsoft ALM Training Virtual Machine in Azure April 2015 Edition</title><link>https://davidtriana.com/posts/2015/running-the-alm-virtual-machine-in-azure-april-2015-edition/</link><pubDate>Thu, 09 Apr 2015 21:37:42 +0000</pubDate><author>david@davidtriana.com (David Triana)</author><guid>https://davidtriana.com/posts/2015/running-the-alm-virtual-machine-in-azure-april-2015-edition/</guid><description>&lt;p>Last month I found myself doing ALM training and demos for a couple of customers, of course using the great ALM Virtual Machine by Brian Keller. With laptops having less and less RAM I choose to set it up in the cloud and found a few web pages with the steps to do it, however with Azure evolving every day I felt the need to put out this blog post with the guidance for Azure in April 2015&lt;/p>
&lt;p>Additional to my RAM constrains I also have very limited internet access; some folks suggest to first download the virtual machine locally and then upload to azure. For me that will take at least 3 days watching a download / upload progress bar, so what I did was to do the download in Azure, and then transfer the bits to Azure itself, something like this:&lt;/p>
&lt;ol>
&lt;li>Create an Azure VM&lt;/li>
&lt;li>Add a big disk to that Azure VM (To have space for the download and extraction)&lt;/li>
&lt;li>Download the ALM VM RAR Files&lt;/li>
&lt;li>Extract the RAR Files&lt;/li>
&lt;li>Transfer the .VHD to a new blob storage&lt;/li>
&lt;li>Create a new VM from the VHD&lt;/li>
&lt;li>Create a point to site VPN to avoid exposing the VM directly to the internet&lt;/li>
&lt;li>Connect to the VPN&lt;/li>
&lt;li>Enjoy!&lt;/li>
&lt;/ol>
&lt;p>So let’s go through the steps:&lt;/p>
&lt;h1 id="create-an-azure-vm">
Create an Azure VM
&lt;a class="heading-link" href="#create-an-azure-vm">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>Go to the portal, New –&amp;gt; Compute –&amp;gt; Marketplace&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>For this any Windows Virtual Machine should work and I can have just picked the Windows Server 2012R2 image, however I pick the Marketplace to choose the lightest and easiest machine Azure offers me&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image1.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb1.png" alt="image" title="image">&lt;/a> &lt;/p>
&lt;p>Then click Create, pick options and Create. In my case I make sure to pick the right subscription, pick my closest datacenter and a very fast tier.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image2.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb2.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>When the VM is ready, add a new disk to it.&lt;/p>
&lt;h1 id="add-a-big-disk-to-the-vm">
Add a big disk to the VM
&lt;a class="heading-link" href="#add-a-big-disk-to-the-vm">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>From the portal click on the VM or browse for it and pick all settings, disks, attach new and choose the same storage account and container as the one for the VM. Adjust the size and cache and click Ok.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image3.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb3.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>RDP to the machine to attach the disk&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image4.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb4.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Open Computer Management and accept the suggestion&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image5.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb5.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Right click the newly created disk, choose New Simple Volume and follow the Wizard to format the disk&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image6.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb6.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Now we have a VM with enough space to fit the downloaded RAR files and then extract them, so lets do it&lt;/p>
&lt;h1 id="download-the-alm-vm-rar-files">
Download the ALM VM RAR Files
&lt;a class="heading-link" href="#download-the-alm-vm-rar-files">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>In this step I really hate to use Free Download Manager and I spent (wasted) half a day setting up a powershell script to do the same. In the end, FDM does the job and do it very well despite the horrible user interface and installer, so for this step just follow Brian’s guide:&lt;/p>
&lt;p>&lt;a href="http://aka.ms/ALMVMs" title="http://aka.ms/ALMVMs">http://aka.ms/ALMVMs&lt;/a>&lt;/p>
&lt;p>Install FDM&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image7.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb7.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Copy the URLs from Brian’s page to the clipboard&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image8.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb8.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Open FDM and set the download folder to the new disk&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image9.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb9.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>choose import from clipboard&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image10.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb10.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Let it do its thing&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image11.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb11.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>When the download finishes, and in my case it took something like 5 minutes, run the .exe that extracts the VHD&lt;/p>
&lt;h1 id="extract-vhd">
Extract VHD
&lt;a class="heading-link" href="#extract-vhd">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image12.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb12.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Meanwhile, install PowerShell, it will be needed to upload the VHD,&lt;/p>
&lt;p>&lt;a href="http://azure.microsoft.com/en-us/documentation/articles/powershell-install-configure/" title="http://azure.microsoft.com/en-us/documentation/articles/powershell-install-configure/">http://azure.microsoft.com/en-us/documentation/articles/powershell-install-configure/&lt;/a>&lt;/p>
&lt;p>Launch PowerShell&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image13.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb13.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Connect to the subscription&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image14.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb14.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>If as me you have more that one subscription, make sure to select the one you intend to use&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image15.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb15.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;h1 id="transfer-the-vhd">
Transfer the VHD
&lt;a class="heading-link" href="#transfer-the-vhd">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>Make sure that the extraction finished and issue the command to start the upload. For the blob storage URL I used the same container as the one for this VM. The URL can be found on the portal&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image16.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb16.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>The command:&lt;/p>
&lt;p>&lt;code>Add-AzureVhd -Destination &amp;quot;&amp;lt;BlobStorageURL&amp;gt;/&amp;lt;YourImagesFolder&amp;gt;/&amp;lt;VHDName&amp;gt;.vhd&amp;quot; -LocalFilePath &amp;lt;PathToVHDFile&amp;gt;&lt;/code>&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image17.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb17.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>In the screenshot I show the blob storage account as the same of my VM. Later I have to re-do this using another storage account in the standard tier since I created this one on the premium tier and I had a lot of trouble later creating the actual VM.&lt;/p>
&lt;h1 id="convert-to-os-image">
Convert to OS Image
&lt;a class="heading-link" href="#convert-to-os-image">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>After the VHD is uploaded it should be added as an operating system image. In the screenshot is done via PowerShell, it can also be done via the legacy portal&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image18.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb18.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;h1 id="create-the-virtual-machine">
Create the Virtual Machine
&lt;a class="heading-link" href="#create-the-virtual-machine">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>Using the just created image, create a new virtual machine. The screenshots are with the old portal, I also did it with PowerShell&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image19.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb19.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image20.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb20.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image21.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb21.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>In the next step it is important to set the machine in a virtual network and remove the public endpoints, why?, because this image has well known usernames and passwords and exposing it to the internet just like that is a bad idea. The recommended way to do it is to leave it on a Virtual Network and then connect via VPN. In this case I used the virtual network from the first virtual machine. That one was created using the preview portal which by default creates an internal network.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image22.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb22.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;h1 id="create-a-point-to-site-vpn">
Create a point to site VPN
&lt;a class="heading-link" href="#create-a-point-to-site-vpn">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>While the VM get setup, let’s create the VPN. Look for the same network where the VM was located and use the wizard to create a Point to site dynamic VPN. When I took the screenshot Site-To-Site was selected, make sure to select POINT-TO-SITE&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image23.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb23.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>To get the VPN working you need a self signed certificate. If you have visual studio installed it’s easy with the makecert.exe utility. The procedure is available at &lt;a href="https://msdn.microsoft.com/library/azure/dn133792.aspx/" title="https://msdn.microsoft.com/library/azure/dn133792.aspx/">https://msdn.microsoft.com/library/azure/dn133792.aspx/&lt;/a> and looks like this:&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image24.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb24.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image25.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb25.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;h1 id="connect-to-the-vpn">
Connect to the VPN
&lt;a class="heading-link" href="#connect-to-the-vpn">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>Wait for the creation of the gateway, that usually takes a long time, and then download the client, install and connect:&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image26.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb26.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;h1 id="connect-to-the-vm">
Connect to the VM
&lt;a class="heading-link" href="#connect-to-the-vm">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image27.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb27.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2015/04/image28.png">&lt;img src="https://davidtriana.com/images/posts/2015/04/image_thumb28.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>At this point the first Virtual Machine can be deleted. I will however keep the disk with the original VHD as a mean to rollback since here in Azure I don’t have the snapshotting facility provided by HyperV.&lt;/p>
&lt;p>Now let’s do some ALM…&lt;/p></description></item></channel></rss>