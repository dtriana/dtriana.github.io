<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AzDevOps on David Triana</title><link>https://davidtriana.com/tags/azdevops/</link><description>Recent content in AzDevOps on David Triana</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2022 David Triana All rights reserved</copyright><lastBuildDate>Fri, 13 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://davidtriana.com/tags/azdevops/index.xml" rel="self" type="application/rss+xml"/><item><title>Failing failed bash Azure DevOps tasks</title><link>https://davidtriana.com/posts/2024/failing-failed-bash/</link><pubDate>Fri, 13 Sep 2024 00:00:00 +0000</pubDate><guid>https://davidtriana.com/posts/2024/failing-failed-bash/</guid><description>&lt;h1 id="scenario">
Scenario
&lt;a class="heading-link" href="#scenario">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>Automating infrastructure as code or continuous delivery with AzDevOps pipelines sometimes requires bash scripts when Arm/Bicep or the built-in tasks fell short. Bash scripts work great, however one issue that surprised me in a production release a few weeks ago is the fact that the failure of one of the commands in the script is not enough to mark the task as failed. For example, this YAML pipeline:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">trigger&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>- none
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">pool&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">vmImage&lt;/span>: ubuntu-latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#ff79c6">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>- &lt;span style="color:#ff79c6">task&lt;/span>: AzureCLI@2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> &lt;span style="color:#ff79c6">displayName&lt;/span>: Get Application Insights Connection String
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#ff79c6">inputs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#ff79c6">azureSubscription&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#39;MSDN Sub&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#ff79c6">scriptType&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#39;bash&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">scriptLocation&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#39;inlineScript&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#ff79c6">inlineScript&lt;/span>: |&lt;span style="color:#f1fa8c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> MSYS_NO_PATHCONV=1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> connString=$(az monitor app-insights component show -a appi-titan-prod -g rg-skynet-prod --query &amp;#39;connectionString&amp;#39; -o tsv)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> echo &amp;#34;##vso[task.setvariable variable=connString;isoutput=true;isreadonly=true;]$connString&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Intended to set a pipeline variable, when ran is marked as success:&lt;/p>
&lt;p>&lt;img src="https://davidtriana.com/images/posts/2024/devops_success.png" alt="AzDevOps Success Job Run">&lt;/p>
&lt;p>despite the fact that the resource group wasn&amp;rsquo;t present:&lt;/p>
&lt;p>From the run logs:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>ERROR: (ResourceGroupNotFound) Resource group &amp;#39;rg-skynet-prod&amp;#39; could not be found.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>Code: ResourceGroupNotFound
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>Message: Resource group &amp;#39;rg-skynet-prod&amp;#39; could not be found.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But because the last command, echo, succeeds, the exit code of the task is 0, causing AzDevOps to mark the task as success.&lt;/p>
&lt;h2 id="making-the-task-fail">
Making the task fail
&lt;a class="heading-link" href="#making-the-task-fail">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>After trying everything I found in the web, the solution is to add the&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">set&lt;/span> -e
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>command at the beginning of the script. From &lt;a href="https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html#index-set">the documentation&lt;/a>, this command instructs the system to exit immediately if a command fails.&lt;/p>
&lt;p>&lt;img src="https://davidtriana.com/images/posts/2024/devops_failed.png" alt="AzDevOps failed job run">&lt;/p>
&lt;p>Other solutions make reference to the&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">failOnStderr&lt;/span>: &lt;span style="color:#ff79c6">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>task input parameter. This parameter on its own didn&amp;rsquo;t work for me, at least when dealing with AZ CLI commands.&lt;/p>
&lt;p>Finally, the&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">continueOnError&lt;/span>: &lt;span style="color:#ff79c6">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>task parameter seems to be the default behavior and doesn&amp;rsquo;t need to be added.&lt;/p></description></item><item><title>Dynamic Loops In Azure DevOps Pipelines</title><link>https://davidtriana.com/posts/2024/azdevops.loops/</link><pubDate>Fri, 26 Jan 2024 00:00:00 +0000</pubDate><guid>https://davidtriana.com/posts/2024/azdevops.loops/</guid><description>&lt;h1 id="scenario">
Scenario
&lt;a class="heading-link" href="#scenario">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>Being used to programming, loops feel very basic, like, for each one of these, do that. However, doing this in AzDevOps pipelines turned out to be not as easy.&lt;/p>
&lt;p>It is trivial, for a previously know set, like an array of environments [&amp;lsquo;dev,&amp;lsquo;qa&amp;rsquo;,&amp;lsquo;prod&amp;rsquo;], no problem there, but what if the set is determined dynamically, while the pipeline is running?&lt;/p>
&lt;p>This is exactly my need. I have a container app, publicly exposed to the internet, with a set of IP rules so that it can only be called by a Logic App. The thing is, the outgoing IP of the Logic App is not a single one and can change from deployment to deployment, so I need to obtain the list of IPs, then run a loop on those IP, to add them as rules.&lt;/p>
&lt;p>Of course I can deploy both the container app and the logic app in a VNET to avoid the need of these rules, not there yet unfortunately, other requirements and limitations make it necessary to keep these public.&lt;/p>
&lt;p>So why is not as easy?&lt;/p>
&lt;p>The Azure Devops loop support relies on the each keyword explained &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops#each-keyword">here&lt;/a>,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">parameters&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>- &lt;span style="color:#ff79c6">name&lt;/span>: listOfStrings
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#ff79c6">type&lt;/span>: object
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#ff79c6">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> - one
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> - two
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>- ${{ each value in parameters.listOfStrings }}:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> - &lt;span style="color:#ff79c6">script&lt;/span>: echo ${{ value }}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, the &lt;code>${{ }}&lt;/code> syntax is not for runtime. Those expressions are expanded before running the workflow as explained &lt;a href="https://stackoverflow.com/a/75832425">here&lt;/a>,&lt;/p>
&lt;h1 id="using-bash-inside-the-task-to-run-the-loop">
Using bash inside the task to run the loop
&lt;a class="heading-link" href="#using-bash-inside-the-task-to-run-the-loop">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>The way I worked around this is by using bash loops, and the same can be accomplished with PowerShell,&lt;/p>
&lt;p>My code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>- &lt;span style="color:#ff79c6">task&lt;/span>: AzureCLI@2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> &lt;span style="color:#ff79c6">displayName&lt;/span>: Add Ip Security Allow Logic Apps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#ff79c6">name&lt;/span>: AddIpSecurityRestrictionsAllowLAs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#ff79c6">inputs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">azureSubscription&lt;/span>: myServiceConnectionName
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#ff79c6">scriptType&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#39;bash&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#ff79c6">scriptLocation&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#39;inlineScript&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> &lt;span style="color:#ff79c6">inlineScript&lt;/span>: |&lt;span style="color:#f1fa8c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> MSYS_NO_PATHCONV=1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> echo &amp;#34;Full Ip List is $(GetLogicAppsOutgoingIps.logicApps_outgoing)&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> IFS=&amp;#39;,&amp;#39; read -ra la_ips &amp;lt;&amp;lt;&amp;lt; &amp;#34;$(GetLogicAppsOutgoingIps.logicApps_outgoing)&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> for i in &amp;#34;${la_ips[@]}&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> do
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> DATE=$(date &amp;#39;+%Y%m%d%H%M%S&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> echo &amp;#34;Adding rule for $i&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> az containerapp ingress access-restriction set \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> --name theNameOfMyContainerApp \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> --resource-group theNameOfTheResourceGroup \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> --rule-name &amp;#34;Allow My Logic App $DATE&amp;#34; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> --ip-address &amp;#34;$i/32&amp;#34; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> --action Allow
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>&lt;span style="color:#f1fa8c"> done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I&amp;rsquo;m adding the date to make the name unique, and the syntax to split the string and the loop in bash is explained &lt;a href="https://stackoverflow.com/a/918931">here&lt;/a>.&lt;/p>
&lt;p>The &lt;code>GetLogicAppsOutgoingIps.logicApps_outgoing&lt;/code> variable is set by a template that runs another AzureCLI bash script, that queries the outgoing IPs, and creates an array with that information,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">logicAppIps&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#ff79c6">$(&lt;/span> az logicapp show -n theLogicAppName -g theResourceGroupName --query &lt;span style="color:#f1fa8c">&amp;#39;outboundIpAddresses&amp;#39;&lt;/span> -o tsv&lt;span style="color:#ff79c6">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">[[&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">$logicAppIps&lt;/span> &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">]]&lt;/span>; &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span> &lt;span style="color:#8be9fd;font-style:italic">exit&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>&lt;span style="color:#ff79c6">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;##vso[task.setvariable variable=logicApps_outgoing;isoutput=true;isreadonly=true;]&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$logicAppIps&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And there it is!, a dynamic loop in an Azure Devops pipeline.&lt;/p></description></item><item><title>Querying Azure DevOps Pipelines YAML Files</title><link>https://davidtriana.com/posts/2021/querying-pipelines-yaml-files/</link><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><guid>https://davidtriana.com/posts/2021/querying-pipelines-yaml-files/</guid><description>&lt;h1 id="scenario">
Scenario
&lt;a class="heading-link" href="#scenario">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>Your project has tens or hundreds of Azure DevOps Pipelines, and you need to determine if a particular YAML definition is used for any of the pipelines.&lt;/p>
&lt;p>The Azure DevOps user interface provides this information, but it requires going pipeline by pipeline since the current experience doesn&amp;rsquo;t shows it in the pipelines list.&lt;/p>
&lt;h2 id="querying-pipeline-details-with-the-azure-cli">
Querying pipeline details with the Azure CLI
&lt;a class="heading-link" href="#querying-pipeline-details-with-the-azure-cli">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>The &lt;a href="https://docs.microsoft.com/en-us/cli/azure/pipelines?view=azure-cli-latest#az_pipelines_show">Azure CLI allows querying pipelines&lt;/a>, for example, in PowerShell,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>az pipelines show --id &lt;span style="color:#bd93f9">321&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Returns a JSON with the details for the pipeline with Id 321&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;__comment&amp;#34;&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;Many properties omitted for brevity&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;authoredBy&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;descriptor&amp;#34;&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;aad.redacted&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;directoryAlias&amp;#34;&lt;/span>: &lt;span style="color:#ff79c6">null&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;displayName&amp;#34;&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;Miles Dyson&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;redacted-guid&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;imageUrl&amp;#34;&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;https://dev.azure.com/cyberdyne/_apis/GraphProfile/MemberAvatars/aad.redacted&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;uniqueName&amp;#34;&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;mdyson@cyberdyne.com&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;url&amp;#34;&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;https://redactedurl&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;createdDate&amp;#34;&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;1997-08-04T16:41:48.533000+00:00&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;Skynet Infra&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;options&amp;#34;&lt;/span>: &lt;span style="color:#ff79c6">null&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;path&amp;#34;&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;\\Infra\\CD\\Skynet&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;process&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#bd93f9">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;yamlFilename&amp;#34;&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;pipelines/Cyberdyne-Infra/Skynet.yml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;processParameters&amp;#34;&lt;/span>: &lt;span style="color:#ff79c6">null&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;project&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;redacted-guid&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;lastUpdateTime&amp;#34;&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;1997-08-04T20:43:19.643Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;Skynet&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;revision&amp;#34;&lt;/span>: &lt;span style="color:#bd93f9">78&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;state&amp;#34;&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;wellFormed&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;url&amp;#34;&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;https://dev.azure.com/cyberdyne/_apis/projects/redactedguid&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> &lt;span style="color:#ff79c6">&amp;#34;visibility&amp;#34;&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;private&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since we are only interested in the yamlFilename, the &amp;ndash;query parameter allows filtering, for example&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>az pipelines show --id &lt;span style="color:#bd93f9">321&lt;/span> --query &lt;span style="color:#ff79c6">process&lt;/span>.yamlFilename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Returns the YAML file for the pipeline with Id 321&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;#34;pipelines/Cyberdyne-Infra/Skynet.yml&amp;#34;
&lt;/code>&lt;/pre>&lt;h2 id="looping-over-all-pipelines">
Looping over all pipelines
&lt;a class="heading-link" href="#looping-over-all-pipelines">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>Now that we know how to get the information, we need it for every pipeline, so first, get a list of all pipeline Ids,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">$pipelines&lt;/span> = az pipelines list --query [].id | &lt;span style="color:#8be9fd;font-style:italic">ConvertFrom-Json&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then iterate over the list, to get the details for each of the pipelines, and save it to a file&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">ForEach&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">$pipeline&lt;/span> &lt;span style="color:#ff79c6">in&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">$pipelines&lt;/span>) {az pipelines show --id &lt;span style="color:#8be9fd;font-style:italic">$pipeline&lt;/span> --query [id,name,process.yamlFilename]} | &lt;span style="color:#8be9fd;font-style:italic">Out-File&lt;/span> c:\pipelines.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="enjoy">
Enjoy!
&lt;a class="heading-link" href="#enjoy">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>Open the resulting text file in your preferred text editor, and easily find the pipelines using the YAML file of interest&lt;/p></description></item><item><title>Deploying Log4Brains ADRs in Azure Static Sites</title><link>https://davidtriana.com/posts/2021/deploying-log4brains-adr-in-azure-static-sites/</link><pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate><guid>https://davidtriana.com/posts/2021/deploying-log4brains-adr-in-azure-static-sites/</guid><description>&lt;h1 id="scenario">
Scenario
&lt;a class="heading-link" href="#scenario">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>Suppose your project has decided to use &lt;a href="https://github.com/thomvaill/log4brains">Log4Brains&lt;/a> to record architectural decisions and now you need to make the resulting website available, in Microsoft Azure, via a CD Pipeline. To learn about &lt;a href="https://en.wikipedia.org/wiki/Architectural_decision#Decision_documentation">ADRs&lt;/a> or architectural decision records I highly recommend &lt;a href="https://ardalis.com/getting-started-with-architecture-decision-records/">Steve Smith&amp;rsquo;s post about it&lt;/a>.&lt;/p>
&lt;h2 id="install-log4brains-and-create-your-adrs">
Install Log4Brains and create your ADRs
&lt;a class="heading-link" href="#install-log4brains-and-create-your-adrs">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Install &lt;a href="https://github.com/thomvaill/log4brains#what-are-the-prerequisites">Log4Brains&amp;rsquo;s prerequisites&lt;/a> to which I will add &lt;a href="https://code.visualstudio.com/Download">VsCode&lt;/a>, with the &lt;a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint">.md extension&lt;/a>&lt;/li>
&lt;li>Install &lt;a href="https://github.com/thomvaill/log4brains#-getting-started">Log4Brains&lt;/a> and follow the getting started guide. You should be able to preview the site, and create your own ADRs&lt;/li>
&lt;/ul>
&lt;h2 id="commit-and-push-to-azdevops">
Commit and push to AzDevOps
&lt;a class="heading-link" href="#commit-and-push-to-azdevops">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>It can be &lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/create-new-repo?view=azure-devops">a new repository&lt;/a> or the existing repository with the application. Before push ensure the output is being ignored via you .gitignore file:&lt;/p>
&lt;pre tabindex="0">&lt;code># Log4Brains Output
.Log4Brains/
&lt;/code>&lt;/pre>&lt;h2 id="add-pipeline-yaml-file">
Add pipeline YAML File
&lt;a class="heading-link" href="#add-pipeline-yaml-file">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>The location doesn&amp;rsquo;t really matter. It can be at / , or you can have a Pipelines or similar folder, the location and name of the file doesn&amp;rsquo;t really matter, what matters is the content:&lt;/p>
&lt;pre tabindex="0">&lt;code>trigger: none
pr: none
stages:
- stage: build
displayName: &amp;#39;Build&amp;#39;
jobs:
- job: build
displayName: &amp;#39;Build&amp;#39;
pool:
vmImage: &amp;#39;ubuntu-latest&amp;#39;
steps:
- task: NodeTool@0
inputs:
versionSpec: &amp;#39;14.x&amp;#39;
displayName: &amp;#39;Install Node.js&amp;#39;
- script: |
npm install -g log4brains
log4brains build
displayName: &amp;#39;Install and Build Log4brains&amp;#39;
- task: CopyFiles@2
displayName: &amp;#39;Copy config to $(System.DefaultWorkingDirectory)/.log4brains/out&amp;#39;
inputs:
Contents: staticwebapp.config.json
TargetFolder: &amp;#39;$(System.DefaultWorkingDirectory)/.log4brains/out&amp;#39;
- task: PublishPipelineArtifact@1
inputs:
targetPath: &amp;#39;$(System.DefaultWorkingDirectory)/.log4brains/out&amp;#39;
artifactName: staticSite
- stage: publish
displayName: &amp;#39;Publish&amp;#39;
dependsOn: build
jobs:
- deployment: deployProd
displayName: &amp;#39;Deploy prod&amp;#39;
environment: prod
strategy:
runOnce:
deploy:
steps:
- task: DownloadPipelineArtifact@2
displayName: Download static site artifact
inputs:
artifact: staticSite
path: $(Build.SourcesDirectory)/staticSite
- task: AzureStaticWebApp@0
displayName: Upload to Azure Static WebApp
inputs:
app_location: /staticSite
output_location: &amp;#34;&amp;#34;
env:
azure_static_web_apps_api_token: $(deployment_token)
&lt;/code>&lt;/pre>&lt;p>This is a multistage pipeline, where first we build the application, or in this case, run the Log4Brains static site generator to get the html/css output and make it available via Azure DevOps Artifacts, then the second stage pulls the artifact and publishes to Azure Static WebSites.&lt;/p>
&lt;p>On the first stage we install node, install Log4Brains, run the build command to generate the output, then publish the output as an artifact. There is a CopyFiles task before the publish task, this task is to add a special config .json file to the output. This &lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/configuration#example-configuration-file">special file&lt;/a> is not needed if you want your ADRs to be publicly available, however if you want to take advantage of the &lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization">Azure Static Website authorization and authentication&lt;/a> capability, you want to copy this file, which gets created in the next step.&lt;/p>
&lt;p>The second stage pulls the artifact and calls the AzureStaticWebApp task to get the site published. The publish token is a pipeline variable that we will set later on the create pipeline step.&lt;/p>
&lt;p>Git commit, git push, to make the file available in the repository.&lt;/p>
&lt;h2 id="adding-the-static-web-page-configuration-file">
Adding the Static Web Page configuration file
&lt;a class="heading-link" href="#adding-the-static-web-page-configuration-file">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>Optional, only if don&amp;rsquo;t want your ADRs to be public. Azure Static Websites provide &lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization">authorization and authentication capabilities&lt;/a> which are configured via the staticwebapp.config.json file, and then adding authorized users via the Azure Portal.&lt;/p>
&lt;p>I created the staticwebapp.config.json file in /, and configured it:&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;routes&amp;#34;: [
{
&amp;#34;route&amp;#34;: &amp;#34;/*&amp;#34;,
&amp;#34;allowedRoles&amp;#34;: [&amp;#34;reader&amp;#34;]
}],
&amp;#34;responseOverrides&amp;#34;: {
&amp;#34;401&amp;#34;: {
&amp;#34;redirect&amp;#34;: &amp;#34;/.auth/login/aad&amp;#34;,
&amp;#34;statusCode&amp;#34;: 302
},
&amp;#34;404&amp;#34;: {
&amp;#34;rewrite&amp;#34;: &amp;#34;/404.html&amp;#34;
}
}
}
&lt;/code>&lt;/pre>&lt;p>What it says is that every route is only allowed to the &amp;ldquo;reader&amp;rdquo; role, and if a request comes from a not previously authenticated user, the request will be redirected to the Azure Active Directory authentication provider.&lt;/p>
&lt;p>Git commit, git push, to make the file available in the repository.&lt;/p>
&lt;h2 id="create-an-azure-static-website">
Create an Azure Static Website
&lt;a class="heading-link" href="#create-an-azure-static-website">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>No surprises here, &lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/publish-devops#create-a-static-web-app">the steps on the portal&lt;/a> are very straight forward, and of course the CLI or a proper infrastructure as code pipeline will work as well.&lt;/p>
&lt;h2 id="create-an-azure-devops-pipeline">
Create an Azure DevOps Pipeline
&lt;a class="heading-link" href="#create-an-azure-devops-pipeline">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>Again, no surprises, &lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/publish-devops#create-the-pipeline-task-in-azure-devops">the steps on the guide are very clear&lt;/a>, except for steps 3 and 4, instead of the starter pipeline, select Existing Pipeline and point to the YAML File created earlier, then proceed to the next steps that set the variable with the token and run the pipeline.&lt;/p>
&lt;p>&lt;img src="https://davidtriana.com/images/posts/2021/log4brains_pipeline.png" alt="&amp;ldquo;Pipeline Success&amp;rdquo;" title="Pipeline Success">&lt;/p>
&lt;p>The artifacts link available in the pipeline output screen will allow you to verify the contents of the artifact, to ensure the index.html and the staticwebapp.config.json files are present, very useful for troubleshooting.&lt;/p>
&lt;p>&lt;img src="https://davidtriana.com/images/posts/2021/log4brains_artifact.png" alt="&amp;ldquo;Artifact details&amp;rdquo;" title="Artifact details">&lt;/p>
&lt;h2 id="invite-users">
Invite users
&lt;a class="heading-link" href="#invite-users">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>Navigate to the Azure Portal, to the Static Web Resource, click on Role management to invite users&lt;/p>
&lt;p>&lt;img src="https://davidtriana.com/images/posts/2021/log4brains_addrolesteps.png" alt="&amp;ldquo;Role management&amp;rdquo;" title="Role management">&lt;/p>
&lt;p>In the invite users dialog, use &amp;lsquo;reader&amp;rsquo; as role. If you use any other role be sure to update the staticwebapp.config.json file accordingly.&lt;/p>
&lt;p>&lt;img src="https://davidtriana.com/images/posts/2021/log4brains_addroledialog.png" alt="&amp;ldquo;Role management&amp;rdquo;" title="Role management">&lt;/p>
&lt;h2 id="enjoy">
Enjoy!
&lt;a class="heading-link" href="#enjoy">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>And with that, the site is available, with user authentication in place. The pipeline trigger can be updated so that every time a new ADR is checked in the pipeline runs automatically.&lt;/p></description></item><item><title>Updating Azure DevOps WorktItems programmatically</title><link>https://davidtriana.com/posts/2020/updating-azdevops-workitems-programmatically/</link><pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate><guid>https://davidtriana.com/posts/2020/updating-azdevops-workitems-programmatically/</guid><description>&lt;h2 id="scenario">
Scenario
&lt;a class="heading-link" href="#scenario">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>Some workitems are missing important information, the information was provided via an Excel sheet, the workitems need to be updated with this information without changing any other properties, particularly the workitem state.&lt;/p>
&lt;h2 id="restrictions">
Restrictions
&lt;a class="heading-link" href="#restrictions">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>The workitems are in done state, and the process template has rules that prevent changes to the properties that need to be updated.&lt;/p>
&lt;p>The Excel integration, which might be a solution, is not working on this environment because of a permissions error.&lt;/p>
&lt;h2 id="solution">
Solution
&lt;a class="heading-link" href="#solution">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h2>
&lt;p>Using the Azure DevOps .NET Client library, it is possible to update workitems. A relatively simple console application will do the trick, especially since the documentation already provides samples showing how to do it,&lt;/p>
&lt;p>&lt;a href="https://docs.microsoft.com/en-us/azure/devops/integrate/quickstarts/work-item-quickstart?view=azure-devops">Fetch work items with queries programmatically in Azure DevOps Services&lt;/a>, and&lt;/p>
&lt;p>&lt;a href="https://docs.microsoft.com/en-us/azure/devops/integrate/quickstarts/create-bug-quickstart?view=azure-devops">Create a bug in Azure DevOps Services using .NET client libraries&lt;/a>.&lt;/p>
&lt;p>The issue with the process template rules remains. Those rules are enforced not only in the user interface but also using the client library or the API directly, which in the end are the same, so for this to work a permissions change is needed, for the particular identity that will be used to interact with AzDevOps via the client library.&lt;/p>
&lt;p>The permission is called “Bypass rules on work item updates” and as off this writing can be found by navigating to Project Settings -&amp;gt; Permissions -&amp;gt; Users -&amp;gt; Find the user that will be used and in the permissions panel find this setting.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2020/AzDevOpsScreenShot01.png">&lt;img src="https://davidtriana.com/images/posts/2020/AzDevOpsScreenShot01.png" alt="AzDevOps permissions settings" title="AzDevOps permissions settings">&lt;/a>&lt;/p>
&lt;p>Once the user has this permission, he/she can certainly do these changes directly via the user interface, however doing repetitive tasks by hand is something to avoid.&lt;/p>
&lt;p>Or not…&lt;/p>
&lt;p>&lt;a href="https://twitter.com/kvlly/status/1255173275090640897?s=20">&lt;img src="https://davidtriana.com/images/posts/2020/Tweet01.png" alt="AzDevOps permissions settings" title="AzDevOps permissions settings">&lt;/a>&lt;/p>
&lt;p>Certainly I have done this many times, writing a huge Excel VB Macro to move things around or implementing a GitHub action just to copy a file, but I think in the end its worth it, primarily because manual tasks are error prone, but also because of the joy of programming!&lt;/p>
&lt;p>So, back to the point,&lt;/p>
&lt;p>With the bypass rules permission, there is something else needed from AzDevOps, and it is a personal access token, which provides impersonation, authentication and authorization. With this token the code will be able to interact with AzDevOps, using the identity of the user for which the token was generated.&lt;/p>
&lt;p>This personal access tokens have a lot of very nice security features which makes it a very good option for many scenarios, in particular the permissions can be scoped to specific artifacts and actions, and are set to expire in 30 days by default.&lt;/p>
&lt;p>At the time of writing this post, the option to create a new token is available in the top right, over the user settings icon,&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2020/AzDevOpsScreenShot02.png">&lt;img src="https://davidtriana.com/images/posts/2020/AzDevOpsScreenShot02.png" alt="AzDevOps personal token button" title="AzDevOps personal token button">&lt;/a>&lt;/p>
&lt;p>And then the token details screen looks like this,&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2020/AzDevOpsScreenShot03.png">&lt;img src="https://davidtriana.com/images/posts/2020/AzDevOpsScreenShot03.png" alt="AzDevOps personal token details" title="AzDevOps personal token details">&lt;/a>&lt;/p>
&lt;p>With the token in hand, we can now get to the code, which is an adaptation from the examples linked earlier.&lt;/p>
&lt;pre tabindex="0">&lt;code>using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using Microsoft.TeamFoundation.WorkItemTracking.WebApi;
using Microsoft.VisualStudio.Services.Common;
using Microsoft.VisualStudio.Services.WebApi;
using Microsoft.VisualStudio.Services.WebApi.Patch;
using Microsoft.VisualStudio.Services.WebApi.Patch.Json;
using Newtonsoft.Json;
namespace ConsoleApp
{
class Program
{
const string AzDevOpsUri = &amp;#34;https://dev.azure.com/&amp;lt;your_org&amp;gt;&amp;#34;;
const string PersonalAccessToken = &amp;#34;&amp;lt;the_token_generated_earlier&amp;gt;&amp;#34;;
const string ProjectName = &amp;#34;&amp;lt;the_name_of_your_project&amp;gt;&amp;#34;;
static void Main()
{
var connection = new VssConnection(new Uri(AzDevOpsUri), new VssBasicCredential(string.Empty, PersonalAccessToken));
var items = LoadJson();
UpdateWorkItems(connection, items).Wait();
Console.ReadKey();
}
static private async Task UpdateWorkItems(VssConnection connection, IEnumerable&amp;lt;Item&amp;gt; items)
{
WorkItemTrackingHttpClient witClient = connection.GetClient&amp;lt;WorkItemTrackingHttpClient&amp;gt;();
foreach (var item in items)
{
JsonPatchDocument documentWithTheUpdate = new JsonPatchDocument
{
new JsonPatchOperation()
{
Operation = Operation.Replace,
Path = &amp;#34;/fields/Microsoft.VSTS.Scheduling.Effort&amp;#34;,
Value = item.Total
}
};
try
{
var result = await witClient.UpdateWorkItemAsync(documentWithTheUpdate, ProjectName, item.ID, false,
true);
Console.WriteLine($&amp;#34;Workitem {result.Id} updated to revision {result.Rev}&amp;#34;);
}
catch (AggregateException ex)
{
Console.WriteLine($&amp;#34;Error updating workitem {item.ID}: {ex.InnerException?.Message}&amp;#34;);
}
}
}
public static List&amp;lt;Item&amp;gt; LoadJson()
{
using (StreamReader r = new StreamReader(&amp;#34;values.json&amp;#34;))
{
string json = r.ReadToEnd();
return JsonConvert.DeserializeObject&amp;lt;List&amp;lt;Item&amp;gt;&amp;gt;(json);
}
}
public class Item
{
public int ID;
public string Title;
public double Dev;
public double Test;
public double Total;
}
}
}
&lt;/code>&lt;/pre>&lt;p>At some point I decided to convert the Excel file to JSON, that is why the code has this LoadJson method. Reading the Excel file specially saved as comma separated values (CSV) should not have been much different except for this method.&lt;/p>
&lt;p>My JSON input file looks like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>[
{
&amp;#34;ID&amp;#34;: &amp;#34;25071&amp;#34;,
&amp;#34;Dev Effort&amp;#34;: &amp;#34;1&amp;#34;,
&amp;#34;Test Effort&amp;#34;: &amp;#34;0.5&amp;#34;,
&amp;#34;Effort&amp;#34;: &amp;#34;1.5&amp;#34;
},
{
&amp;#34;ID&amp;#34;: &amp;#34;44260&amp;#34;,
&amp;#34;Dev Effort&amp;#34;: &amp;#34;2&amp;#34;,
&amp;#34;Test Effort&amp;#34;: &amp;#34;0.5&amp;#34;,
&amp;#34;Effort&amp;#34;: &amp;#34;2.5&amp;#34;
},
{
&amp;#34;ID&amp;#34;: &amp;#34;43303&amp;#34;,
&amp;#34;Dev Effort&amp;#34;: &amp;#34;4&amp;#34;,
&amp;#34;Test Effort&amp;#34;: &amp;#34;1&amp;#34;,
&amp;#34;Effort&amp;#34;: &amp;#34;5&amp;#34;
}, ...
&lt;/code>&lt;/pre>&lt;p>And running the program with proper configuration and having the JSON file in the right place produce the sample output bellow&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2020/AzDevOpsScreenShot04.png">&lt;img src="https://davidtriana.com/images/posts/2020/AzDevOpsScreenShot04.png" alt="Program Output" title="Program Output">&lt;/a>&lt;/p>
&lt;p>And mission accomplished, now this WorkItems have the missing effort populated, without changing the “Done” state date.&lt;/p></description></item><item><title>Migrating from local TFS to TFSPreview</title><link>https://davidtriana.com/posts/2012/migrating-from-local-tfs-to-tfspreview/</link><pubDate>Tue, 06 Mar 2012 23:11:21 +0000</pubDate><guid>https://davidtriana.com/posts/2012/migrating-from-local-tfs-to-tfspreview/</guid><description>&lt;p>TFSPreview, the Team Foundation on the cloud offered by Microsoft is a very good alternative, specially for distributed development teams.&lt;/p>
&lt;p>It’s currently free and invite only but the invite codes are relatively easy to get. I asked for one in the page and got it in two days.&lt;/p>
&lt;p>&lt;a href="http://www.tfspreview.com">www.tfspreview.com&lt;/a>&lt;/p>
&lt;p>Account activated, TFS available but what about my existing projects in my local TFS?,&lt;/p>
&lt;p>The official word is that there’s no supported way to migrate, but, there’re some reports of success using the TFS Integration tools, well, I’m about to confirm or deny that reports!&lt;/p>
&lt;p>1. Create your own TFSPreview account&lt;/p>
&lt;p>2. Install TFS Integration Tools&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2012/05/image33.png">&lt;img src="https://davidtriana.com/images/posts/2012/05/image33.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>3. Ensure that you are running Visual Studio 2010 SP1 &lt;a href="http://www.microsoft.com/download/en/details.aspx?id=23691">http://www.microsoft.com/download/en/details.aspx?id=23691&lt;/a>and have KB2581206 &lt;a href="http://support.microsoft.com/kb/2581206">http://support.microsoft.com/kb/2581206&lt;/a> installed.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2012/05/image34.png">&lt;img src="https://davidtriana.com/images/posts/2012/05/image34.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>In my case I was missing the KB, not sure if it’s even distributed by Windows Update.&lt;/p>
&lt;p>4. Make sure that your Visual Studio is able to connect to TFSPreview. It’s as easy as connecting to any other TFS, just point the team explorer to the URL, a new authentication window pops up and voila.&lt;/p>
&lt;p>5. Create the project(s) in TFSPreview via the website.&lt;/p>
&lt;p>6. Create a migration configuration with the TFS Integration Tools&lt;/p>
&lt;p>[&lt;img src="https://davidtriana.com/images/posts/2012/05/image35.png" alt="image" title="image">](/images/posts/2012/05/image35.png&lt;/p>
&lt;p>7. Select the template that you really need.&lt;/p>
&lt;p>[&lt;img src="https://davidtriana.com/images/posts/2012/05/image36.png" alt="image" title="image">](/images/posts/2012/05/image36.png&lt;/p>
&lt;p>8. Click configure for each side.&lt;/p>
&lt;p>[&lt;img src="https://davidtriana.com/images/posts/2012/05/image37.png" alt="image" title="image">](/images/posts/2012/05/image37.png&lt;/p>
&lt;p>9. The dialog to pick the project is the same from Team Explorer.&lt;/p>
&lt;p>[&lt;img src="https://davidtriana.com/images/posts/2012/05/image38.png" alt="image" title="image">](/images/posts/2012/05/image38.png&lt;/p>
&lt;p>10. All set, click start&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2012/05/image39.png">&lt;img src="https://davidtriana.com/images/posts/2012/05/image39.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>11. Wait … , wait…, wait&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2012/05/image40.png">&lt;img src="https://davidtriana.com/images/posts/2012/05/image40.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>12. It worked!!!!&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2012/05/image41.png">&lt;img src="https://davidtriana.com/images/posts/2012/05/image41.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>13. Of course I do not trust the green icons in the tool. I checked in the TFSPreview web site and everything looks in place. Then I connected via Visual Studio, connected the source control, build the project and it works perfectly.&lt;/p></description></item></channel></rss>