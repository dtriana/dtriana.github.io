<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ASP.NET on David Triana</title><link>https://davidtriana.com/tags/asp.net/</link><description>Recent content in ASP.NET on David Triana</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2022 David Triana All rights reserved</copyright><lastBuildDate>Thu, 20 Dec 2012 16:45:55 +0000</lastBuildDate><atom:link href="https://davidtriana.com/tags/asp.net/index.xml" rel="self" type="application/rss+xml"/><item><title>Fixing Configuration Error– 'oracleDBBinding' could not be found</title><link>https://davidtriana.com/posts/2012/fixing-configuration-error-oracledbbinding-could-not-be-found/</link><pubDate>Thu, 20 Dec 2012 16:45:55 +0000</pubDate><guid>https://davidtriana.com/posts/2012/fixing-configuration-error-oracledbbinding-could-not-be-found/</guid><description>&lt;p>This error shows up with web applications and/or web services that use the Biztalk LOB Adapters for Oracle and the server doesn´t have the required assemblies.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2012/12/image.png">&lt;img src="https://davidtriana.com/images/posts/2012/12/image_thumb.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>To fix it just install:&lt;/p>
&lt;p>The WCF LOB Adapter&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2012/12/image1.png">&lt;img src="https://davidtriana.com/images/posts/2012/12/image_thumb1.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Then the biztalk adapter pack&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2012/12/image2.png">&lt;img src="https://davidtriana.com/images/posts/2012/12/image_thumb2.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>And declare the binding either on the machine.config for the whole server or in the web.config of the particular web app&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;system.serviceModel&amp;gt;
&amp;lt;extensions&amp;gt;
&amp;lt;bindingElementExtensions&amp;gt;
&amp;lt;add name=&amp;#34;oracleDBAdapter&amp;#34; type=&amp;#34;Microsoft.Adapters.OracleDB.OracleDBAdapterExtensionElement,Microsoft.Adapters.OracleDB, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&amp;#34; /&amp;gt;
&amp;lt;/bindingElementExtensions&amp;gt;
&amp;lt;bindingExtensions&amp;gt;
&amp;lt;add name=&amp;#34;oracleDBBinding&amp;#34; type=&amp;#34;Microsoft.Adapters.OracleDB.OracleDBAdapterBindingSection,Microsoft.Adapters.OracleDB, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&amp;#34; /&amp;gt;
&amp;lt;/bindingExtensions&amp;gt;
&amp;lt;/extensions&amp;gt;
&amp;lt;/system.serviceModel&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Both downloads can be found easily on the Microsoft Downloads web site&lt;/p></description></item><item><title>Forcing SSL (https) on ASP.NET and ASP.NET MVC Web Applications</title><link>https://davidtriana.com/posts/2011/forcing-ssl-https-on-aspnet-and-aspnet-mvc-web-applications/</link><pubDate>Tue, 20 Sep 2011 19:56:00 +0000</pubDate><guid>https://davidtriana.com/posts/2011/forcing-ssl-https-on-aspnet-and-aspnet-mvc-web-applications/</guid><description>&lt;p>Frequently is very desirable that the request and the pages served to the user from the Web Application are delivered under https. Why?, because otherwise the data is transmitted in plain text over the wire or over the air if using WiFi and can be intercepted by other people.&lt;/p>
&lt;p>How hard it will be to intercept the data? trivial to a motivated attacker, oppressive government or dedicated law enforcement agency. In fact, lately is trivial to anyone with tools like &lt;a href="http://codebutler.github.com/firesheep/">firesheep&lt;/a>and other ready to use and easily available software.&lt;/p>
&lt;p>What data can be intercepted? everything posted to the web application like usernames and passwords and everything sent back to you by the web application like your session cookie. With that, the attacker can pose as you and take any action that you can on the web application.&lt;/p>
&lt;p>So what to do about that? Make sure your data traffic flows over HTTPS&lt;/p>
&lt;p>How to do that?&lt;/p>
&lt;p>The following steps assume that we are talking about a web application build with ASP.NET Webforms or ASP.NET MVC and exposed over the internet. For a intranet application the approach is a little different specially for the firsts steps.&lt;/p>
&lt;p>0-Buy a domain name&lt;/p>
&lt;p>Otherwise how do you plan to invite your users to your website?&lt;/p>
&lt;p>1-Buy an SSL Certificate for that domain&lt;/p>
&lt;p>You need an SSL certificate for the domain that exposes your web application, for example if your web application is to be consumed using bigbank.com then you need to buy an SSL certificate for that domain from an Certification Authority. There is no relevant technical difference between the certificates issued by the different certification authorities, however some obscure authorities may not be trusted by default on all the commercially available web browsers and that can be bad for your web site. Is not that the communication cannot be secured with any certificate but the user will get a message warning him about potential risks visiting that web site. The certificate certifies that you exists in the real world and you have administrative control over the domain. The cheapest certification authorities do this verification automatically, the more expensive ones may demand to speak with you over the phone and may require legal documents about your company before issuing the certificate, however from a technical point of view and from the point of view of most users there’s no difference between an U$40/year certificate (godaddy.com®) and a U$400/year one. (verisign.com®) . There’s another type of certificates called EV certificates that stands for Extended Validation. This certificates are extremely expensive, so expensive that makes the user’s navigator address bar go green. From the perspective of protecting the traffic this certificates have no difference with the plain SSL Certificates. This is the kind of certificate used by amazon.com® for example.&lt;/p>
&lt;p>2-Install the certificate&lt;/p>
&lt;p>Depending on your version of IIS or the kind of hosting you are using for your web application this process can be very different plus there’s thousands of articles over the internet about how to do it so just Bing “how to install an ssl certificate in __________” and fill the blank with your hosting environment and you’re good to go.&lt;/p>
&lt;p>3-Test your site over SSL&lt;/p>
&lt;p>In some hosting environments once the certificate is in place you should be able to open your web site using HTTPS instead of just HTTP. If that’s not the case then you need to make sure that the bindings are well configured in IIS for your website, for example in IIS 7.0 right clic your web site, edit bindings&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2012/05/image31.png">&lt;img src="https://davidtriana.com/images/posts/2012/05/image_thumb30.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>Then in the Site Bindings dialog clic Add, choose https for Type and choose the adequate SSL Certificate.&lt;/p>
&lt;p>&lt;a href="https://davidtriana.com/images/posts/2012/05/image32.png">&lt;img src="https://davidtriana.com/images/posts/2012/05/image_thumb31.png" alt="image" title="image">&lt;/a>&lt;/p>
&lt;p>4-Make sure the pages are served over HTTPS&lt;/p>
&lt;p>Now the web application is available over https, however it depends on the user to type https every time he uses the web application. The programmer can hardcode the links in the application so they are HTTPS but the user can always change that to http from the address bar so what to do about it? You need to programmatically check if the request is over HTTPS and if it’s not then make it HTTPS.&lt;/p>
&lt;p>  On ASP.NET Webforms one way to do that is to override the OnInit event. This can be done in the .master page:&lt;/p>
&lt;p>protected override void OnInit(EventArgs e)&lt;br>
{&lt;br>
       if (!Request.IsSecureConnection)&lt;br>
       {&lt;br>
           Response.Redirect(Request.Url.AbsoluteUri.ToLower().Replace(&amp;quot;&lt;a href="http://%22">http://&amp;quot;&lt;/a>, &amp;ldquo;&lt;a href="https://%22">https://&amp;rdquo;)&lt;/a>), true);&lt;br>
       }&lt;br>
       base.OnInit(e);&lt;br>
}&lt;/p>
&lt;p>On ASP.NET MVC there’s a build in actionfilter:&lt;/p>
&lt;pre tabindex="0">&lt;code>\[RequireHttps\]
&lt;/code>&lt;/pre>&lt;p>However that filter result in a runtime exception when the action is requested over HTTP so the best solution I’ve found so far and I’m currently using in a commercial web site that I maintain consist on a custom ActionFilterAttribute that does something very similar to the Redirect in the Webforms solution but with the elegance of MVC., on the post there is two solutions, use the second one. As the author explains the first one can mess up QueryString data.&lt;/p>
&lt;p>&lt;a href="http://weblogs.asp.net/dwahlin/archive/2009/08/25/requiring-ssl-for-asp-net-mvc-controllers.aspx">Requiring SSL For ASP.NET MVC Controllers&lt;/a>&lt;/p></description></item><item><title>Using AzMan to provide role membership in ASP.NET</title><link>https://davidtriana.com/posts/2011/using-azman-to-provide-role-membership-in-asp-net/</link><pubDate>Thu, 15 Sep 2011 16:43:28 +0000</pubDate><guid>https://davidtriana.com/posts/2011/using-azman-to-provide-role-membership-in-asp-net/</guid><description>&lt;p>The membership services provided in ASP.NET are very rich and flexible. As part of that flexibility they allow to store the identities and roles of your web site users in a variety of providers, typically SQL Server or Active Directory.&lt;/p>
&lt;p>What if the requirement of your application make it so the best place for the identities is an LDAP repository but you don’t want Active Directory? Well, Windows Server provides a role called AD LDS – Active Directory Lightweight Directory Services. Basically an LDAP repository with some Active Directory capabilities.&lt;/p>
&lt;p>Creating and Authenticating user in an ASP.NET application works mostly out of the box simply by changing the provider to active directory and pointing it to the AD LDS, however when it comes to authorization the story is very different. The provider that comes with the Framework just doesn’t work. It was made for ADAM, the previous version of AD LDS and it just doesn’t work.&lt;/p>
&lt;p>The best implementation guide is the one from MSDN:&lt;/p>
&lt;p>&lt;a href="http://msdn.microsoft.com/en-us/library/ms998331.aspx">http://msdn.microsoft.com/en-us/library/ms998331.aspx&lt;/a>&lt;/p>
&lt;p>Following that guide you will get AD LDS working and authentication working. For authorization the best post I found is this:&lt;/p>
&lt;p>&lt;a href="http://tonesdotnetblog.wordpress.com/2010/02/26/how-to-use-asp-net-membership-and-role-providers-with-adlds-adam-with-code/">http://tonesdotnetblog.wordpress.com/2010/02/26/how-to-use-asp-net-membership-and-role-providers-with-adlds-adam-with-code/&lt;/a>&lt;/p>
&lt;p>This solution almost work, however there are a couple defects in the source code that will fail in runtime and since the real work is done via interop with COM the error messages doesn’t help very much.&lt;/p>
&lt;p>The defects has to do with the fact that the ConnectionString is never really obtained from the app.config / web.config . The way the code was written makes it so the connection string used is always the one in the source code regardless of what is on the web.config.&lt;/p>
&lt;p>The following source code is mostly the same code from the page above but it implements the Initialize method to read the connectionstring from the web.config&lt;/p>
&lt;p>Source Code &lt;a href="http://davidtriana.com/file.axd?file=AzManRoleProvider.cs">AzManRoleProvider.cs&lt;/a>&lt;/p></description></item><item><title>Missing management server delegation, 401 error and 403.14 error when deploying a new IIS7.5 for Web Deploy and ASP.NET MVC 2/3</title><link>https://davidtriana.com/posts/2011/missing-management-server-delegation-401-error-and-403-14-error-when-deploying-a-new-iis7-5-for-web-deploy-and-asp-net-mvc-23/</link><pubDate>Fri, 10 Jun 2011 19:25:00 +0000</pubDate><guid>https://davidtriana.com/posts/2011/missing-management-server-delegation-401-error-and-403-14-error-when-deploying-a-new-iis7-5-for-web-deploy-and-asp-net-mvc-23/</guid><description>&lt;p>Last night I was setting up a new box for a web site migration and lost a lot of time with that 3 issues.&lt;/p>
&lt;p>I used Web Platform Installer to setup most of the server hoping that it will leave everything working as expected, however I found that is not the case.&lt;/p>
&lt;p>First I needed to setup the Web Deploy service to install the web application from visual studio, however the Web Platform Installer leaves a few things missing when it deals with the Web Deploy.&lt;/p>
&lt;h1 id="missing-management-server-delegation-icon">
Missing Management Server Delegation icon
&lt;a class="heading-link" href="#missing-management-server-delegation-icon">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>The first problem I found is that when following the instructions to setup the web deploy service &lt;a href="http://learn.iis.net/page.aspx/516/configure-the-web-deployment-handler/">http://learn.iis.net/page.aspx/516/configure-the-web-deployment-handler/&lt;/a> , in the Part 2, there must be a Management Service Delegation icon, however it wasn’t present in my box. After trying the add role features and looking around in the forums I found out that the setup from WPI fail to install that component.&lt;/p>
&lt;p>&lt;strong>Solution&lt;/strong>: Download the setup, choose add features and select all, or uninstall and reinstall selecting complete.&lt;/p>
&lt;h1 id="401-error-when-deploying-from-visual-studio">
401 error when deploying from Visual Studio
&lt;a class="heading-link" href="#401-error-when-deploying-from-visual-studio">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>After finishing the setup procedure for Web Deploy I tried to setup the application from visual studio, however I keep getting http 401 errors. This time the forums didn’t helped. All the posts are related to not following the instructions for the web deploy setup but I even repeat the process from the start and no luck.&lt;/p>
&lt;p>It turns out that the client machine was using web deploy 1.0 while the server was with the 2.0 version. Updated the client with WPI and voila.&lt;/p>
&lt;h1 id="40314-error-when-accessing-the-mvc-application">
403.14 error when accessing the MVC application
&lt;a class="heading-link" href="#40314-error-when-accessing-the-mvc-application">
&lt;i class="fa fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
&lt;span class="sr-only">Link to heading&lt;/span>
&lt;/a>
&lt;/h1>
&lt;p>Finally the application deployed from Visual Studio, everything seems fine but the application gives a http 403.14 error. Again the forums offer little help suggesting reinstalling the static content compression feature and things like that, however at the third page of results in BING I found the solution:&lt;/p>
&lt;p>C:\Windows\Microsoft.NET\Framework64\v4.0.30319\aspnet_regiis -i&lt;/p></description></item></channel></rss>